/* automatically generated by rust-bindgen 0.70.1 */
pub const ZE_MAX_IPC_HANDLE_SIZE: u32 = 64;
pub const ZE_MAX_UUID_SIZE: u32 = 16;
pub const ZE_MAX_DRIVER_UUID_SIZE: u32 = 16;
pub const ZE_MAX_EXTENSION_NAME: u32 = 256;
pub const ZE_MAX_DEVICE_UUID_SIZE: u32 = 16;
pub const ZE_MAX_DEVICE_NAME: u32 = 256;
pub const ZE_SUBGROUPSIZE_COUNT: u32 = 8;
pub const ZE_MAX_NATIVE_KERNEL_UUID_SIZE: u32 = 16;
pub const ZE_MAX_KERNEL_UUID_SIZE: u32 = 16;
pub const ZE_MAX_MODULE_UUID_SIZE: u32 = 16;
pub const ZE_MODULE_PROGRAM_EXP_NAME: &[u8; 31] = b"ZE_experimental_module_program\0";
pub const ZE_RAYTRACING_EXT_NAME: &[u8; 24] = b"ZE_extension_raytracing\0";
pub const ZE_FLOAT_ATOMICS_EXT_NAME: &[u8; 27] = b"ZE_extension_float_atomics\0";
pub const ZE_GLOBAL_OFFSET_EXP_NAME: &[u8; 30] = b"ZE_experimental_global_offset\0";
pub const ZE_RELAXED_ALLOCATION_LIMITS_EXP_NAME: &[u8; 42] =
    b"ZE_experimental_relaxed_allocation_limits\0";
pub const ZE_GET_KERNEL_BINARY_EXP_NAME: &[u8; 31] = b"ZE_extension_kernel_binary_exp\0";
pub const ZE_DRIVER_DDI_HANDLES_EXT_NAME: &[u8; 32] = b"ZE_extension_driver_ddi_handles\0";
pub const ZE_EXTERNAL_SEMAPHORES_EXTENSION_NAME: &[u8; 33] = b"ZE_extension_external_semaphores\0";
pub const ZE_CACHE_RESERVATION_EXT_NAME: &[u8; 31] = b"ZE_extension_cache_reservation\0";
pub const ZE_EVENT_QUERY_TIMESTAMPS_EXP_NAME: &[u8; 39] =
    b"ZE_experimental_event_query_timestamps\0";
pub const ZE_IMAGE_MEMORY_PROPERTIES_EXP_NAME: &[u8; 40] =
    b"ZE_experimental_image_memory_properties\0";
pub const ZE_IMAGE_VIEW_EXT_NAME: &[u8; 24] = b"ZE_extension_image_view\0";
pub const ZE_IMAGE_VIEW_EXP_NAME: &[u8; 27] = b"ZE_experimental_image_view\0";
pub const ZE_IMAGE_VIEW_PLANAR_EXT_NAME: &[u8; 31] = b"ZE_extension_image_view_planar\0";
pub const ZE_IMAGE_VIEW_PLANAR_EXP_NAME: &[u8; 34] = b"ZE_experimental_image_view_planar\0";
pub const ZE_KERNEL_SCHEDULING_HINTS_EXP_NAME: &[u8; 33] = b"ZE_experimental_scheduling_hints\0";
pub const ZE_LINKONCE_ODR_EXT_NAME: &[u8; 26] = b"ZE_extension_linkonce_odr\0";
pub const ZE_CONTEXT_POWER_SAVING_HINT_EXP_NAME: &[u8; 34] = b"ZE_experimental_power_saving_hint\0";
pub const ZE_SUBGROUPS_EXT_NAME: &[u8; 23] = b"ZE_extension_subgroups\0";
pub const ZE_EU_COUNT_EXT_NAME: &[u8; 22] = b"ZE_extension_eu_count\0";
pub const ZE_PCI_PROPERTIES_EXT_NAME: &[u8; 28] = b"ZE_extension_pci_properties\0";
pub const ZE_SRGB_EXT_NAME: &[u8; 18] = b"ZE_extension_srgb\0";
pub const ZE_IMAGE_COPY_EXT_NAME: &[u8; 24] = b"ZE_extension_image_copy\0";
pub const ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_NAME: &[u8; 42] =
    b"ZE_extension_image_query_alloc_properties\0";
pub const ZE_LINKAGE_INSPECTION_EXT_NAME: &[u8; 32] = b"ZE_extension_linkage_inspection\0";
pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_NAME: &[u8; 38] =
    b"ZE_extension_memory_compression_hints\0";
pub const ZE_MEMORY_FREE_POLICIES_EXT_NAME: &[u8; 34] = b"ZE_extension_memory_free_policies\0";
pub const ZE_BANDWIDTH_PROPERTIES_EXP_NAME: &[u8; 37] = b"ZE_experimental_bandwidth_properties\0";
pub const ZE_DEVICE_LUID_EXT_NAME: &[u8; 25] = b"ZE_extension_device_luid\0";
pub const ZE_MAX_DEVICE_LUID_SIZE_EXT: u32 = 8;
pub const ZE_FABRIC_EXP_NAME: &[u8; 23] = b"ZE_experimental_fabric\0";
pub const ZE_MAX_FABRIC_EDGE_MODEL_EXP_SIZE: u32 = 256;
pub const ZE_DEVICE_MEMORY_PROPERTIES_EXT_NAME: &[u8; 38] =
    b"ZE_extension_device_memory_properties\0";
pub const ZE_BFLOAT16_CONVERSIONS_EXT_NAME: &[u8; 34] = b"ZE_extension_bfloat16_conversions\0";
pub const ZE_DEVICE_IP_VERSION_EXT_NAME: &[u8; 31] = b"ZE_extension_device_ip_version\0";
pub const ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_NAME: &[u8; 46] =
    b"ZE_extension_kernel_max_group_size_properties\0";
pub const ZE_SUB_ALLOCATIONS_EXP_NAME: &[u8; 32] = b"ZE_experimental_sub_allocations\0";
pub const ZE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_NAME: &[u8; 43] =
    b"ZE_extension_event_query_kernel_timestamps\0";
pub const ZE_RTAS_BUILDER_EXP_NAME: &[u8; 29] = b"ZE_experimental_rtas_builder\0";
pub const ZE_EVENT_POOL_COUNTER_BASED_EXP_NAME: &[u8; 41] =
    b"ZE_experimental_event_pool_counter_based\0";
pub const ZE_BINDLESS_IMAGE_EXP_NAME: &[u8; 31] = b"ZE_experimental_bindless_image\0";
pub const ZE_COMMAND_LIST_CLONE_EXP_NAME: &[u8; 35] = b"ZE_experimental_command_list_clone\0";
pub const ZE_IMMEDIATE_COMMAND_LIST_APPEND_EXP_NAME: &[u8; 46] =
    b"ZE_experimental_immediate_command_list_append\0";
pub const ZE_MUTABLE_COMMAND_LIST_EXP_NAME: &[u8; 37] = b"ZE_experimental_mutable_command_list\0";
pub type ze_bool_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_driver_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_driver_handle_t(pub *mut _ze_driver_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_device_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_device_handle_t(pub *mut _ze_device_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_context_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_context_handle_t(pub *mut _ze_context_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_queue_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_command_queue_handle_t(pub *mut _ze_command_queue_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_command_list_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_command_list_handle_t(pub *mut _ze_command_list_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fence_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_fence_handle_t(pub *mut _ze_fence_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_pool_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_event_pool_handle_t(pub *mut _ze_event_pool_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_event_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_event_handle_t(pub *mut _ze_event_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_image_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_image_handle_t(pub *mut _ze_image_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_module_handle_t(pub *mut _ze_module_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_module_build_log_handle_t {
    _unused: [u8; 0],
}
pub type ze_module_build_log_handle_t = *mut _ze_module_build_log_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_kernel_handle_t {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ze_kernel_handle_t(pub *mut _ze_kernel_handle_t);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_sampler_handle_t {
    _unused: [u8; 0],
}
pub type ze_sampler_handle_t = *mut _ze_sampler_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_physical_mem_handle_t {
    _unused: [u8; 0],
}
pub type ze_physical_mem_handle_t = *mut _ze_physical_mem_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fabric_vertex_handle_t {
    _unused: [u8; 0],
}
pub type ze_fabric_vertex_handle_t = *mut _ze_fabric_vertex_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_fabric_edge_handle_t {
    _unused: [u8; 0],
}
pub type ze_fabric_edge_handle_t = *mut _ze_fabric_edge_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_ipc_mem_handle_t {
    pub data: [::core::ffi::c_char; 64usize],
}
pub type ze_ipc_mem_handle_t = _ze_ipc_mem_handle_t;

#[cfg(feature = "intel")]
unsafe impl Send for ze_kernel_handle_t {}
#[cfg(feature = "intel")]
unsafe impl Sync for ze_kernel_handle_t {}

#[cfg(feature = "intel")]
unsafe impl Send for ze_command_queue_handle_t {}
#[cfg(feature = "intel")]
unsafe impl Sync for ze_command_queue_handle_t {}

#[cfg(feature = "intel")]
unsafe impl Send for ze_command_list_handle_t {}
#[cfg(feature = "intel")]
unsafe impl Sync for ze_command_list_handle_t {}

#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_ipc_event_pool_handle_t {
    pub data: [::core::ffi::c_char; 64usize],
}
pub type ze_ipc_event_pool_handle_t = _ze_ipc_event_pool_handle_t;
impl _ze_result_t {
    pub const ZE_RESULT_SUCCESS: _ze_result_t = _ze_result_t(0);
}
impl _ze_result_t {
    pub const ZE_RESULT_NOT_READY: _ze_result_t = _ze_result_t(1);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_DEVICE_LOST: _ze_result_t = _ze_result_t(1879048193);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_OUT_OF_HOST_MEMORY: _ze_result_t = _ze_result_t(1879048194);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_OUT_OF_DEVICE_MEMORY: _ze_result_t = _ze_result_t(1879048195);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_MODULE_BUILD_FAILURE: _ze_result_t = _ze_result_t(1879048196);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_MODULE_LINK_FAILURE: _ze_result_t = _ze_result_t(1879048197);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_DEVICE_REQUIRES_RESET: _ze_result_t = _ze_result_t(1879048198);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_DEVICE_IN_LOW_POWER_STATE: _ze_result_t = _ze_result_t(1879048199);
}
impl _ze_result_t {
    pub const ZE_RESULT_EXP_ERROR_DEVICE_IS_NOT_VERTEX: _ze_result_t = _ze_result_t(2146435073);
}
impl _ze_result_t {
    pub const ZE_RESULT_EXP_ERROR_VERTEX_IS_NOT_DEVICE: _ze_result_t = _ze_result_t(2146435074);
}
impl _ze_result_t {
    pub const ZE_RESULT_EXP_ERROR_REMOTE_DEVICE: _ze_result_t = _ze_result_t(2146435075);
}
impl _ze_result_t {
    pub const ZE_RESULT_EXP_ERROR_OPERANDS_INCOMPATIBLE: _ze_result_t = _ze_result_t(2146435076);
}
impl _ze_result_t {
    pub const ZE_RESULT_EXP_RTAS_BUILD_RETRY: _ze_result_t = _ze_result_t(2146435077);
}
impl _ze_result_t {
    pub const ZE_RESULT_EXP_RTAS_BUILD_DEFERRED: _ze_result_t = _ze_result_t(2146435078);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INSUFFICIENT_PERMISSIONS: _ze_result_t = _ze_result_t(1879113728);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_NOT_AVAILABLE: _ze_result_t = _ze_result_t(1879113729);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_DEPENDENCY_UNAVAILABLE: _ze_result_t = _ze_result_t(1879179264);
}
impl _ze_result_t {
    pub const ZE_RESULT_WARNING_DROPPED_DATA: _ze_result_t = _ze_result_t(1879179265);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNINITIALIZED: _ze_result_t = _ze_result_t(2013265921);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNSUPPORTED_VERSION: _ze_result_t = _ze_result_t(2013265922);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNSUPPORTED_FEATURE: _ze_result_t = _ze_result_t(2013265923);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_ARGUMENT: _ze_result_t = _ze_result_t(2013265924);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_NULL_HANDLE: _ze_result_t = _ze_result_t(2013265925);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_HANDLE_OBJECT_IN_USE: _ze_result_t = _ze_result_t(2013265926);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_NULL_POINTER: _ze_result_t = _ze_result_t(2013265927);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_SIZE: _ze_result_t = _ze_result_t(2013265928);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNSUPPORTED_SIZE: _ze_result_t = _ze_result_t(2013265929);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNSUPPORTED_ALIGNMENT: _ze_result_t = _ze_result_t(2013265930);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_SYNCHRONIZATION_OBJECT: _ze_result_t =
        _ze_result_t(2013265931);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_ENUMERATION: _ze_result_t = _ze_result_t(2013265932);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNSUPPORTED_ENUMERATION: _ze_result_t = _ze_result_t(2013265933);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNSUPPORTED_IMAGE_FORMAT: _ze_result_t = _ze_result_t(2013265934);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_NATIVE_BINARY: _ze_result_t = _ze_result_t(2013265935);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_GLOBAL_NAME: _ze_result_t = _ze_result_t(2013265936);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_KERNEL_NAME: _ze_result_t = _ze_result_t(2013265937);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_FUNCTION_NAME: _ze_result_t = _ze_result_t(2013265938);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_GROUP_SIZE_DIMENSION: _ze_result_t = _ze_result_t(2013265939);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_GLOBAL_WIDTH_DIMENSION: _ze_result_t =
        _ze_result_t(2013265940);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_INDEX: _ze_result_t =
        _ze_result_t(2013265941);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_KERNEL_ARGUMENT_SIZE: _ze_result_t = _ze_result_t(2013265942);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_KERNEL_ATTRIBUTE_VALUE: _ze_result_t =
        _ze_result_t(2013265943);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_MODULE_UNLINKED: _ze_result_t = _ze_result_t(2013265944);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_COMMAND_LIST_TYPE: _ze_result_t = _ze_result_t(2013265945);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_OVERLAPPING_REGIONS: _ze_result_t = _ze_result_t(2013265946);
}
impl _ze_result_t {
    pub const ZE_RESULT_WARNING_ACTION_REQUIRED: _ze_result_t = _ze_result_t(2013265947);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_INVALID_KERNEL_HANDLE: _ze_result_t = _ze_result_t(2013265948);
}
impl _ze_result_t {
    pub const ZE_RESULT_ERROR_UNKNOWN: _ze_result_t = _ze_result_t(2147483646);
}
impl _ze_result_t {
    pub const ZE_RESULT_FORCE_UINT32: _ze_result_t = _ze_result_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_result_t(pub ::core::ffi::c_uint);
pub use self::_ze_result_t as ze_result_t;

impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DRIVER_PROPERTIES: _ze_structure_type_t = _ze_structure_type_t(1);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DRIVER_IPC_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(2);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_PROPERTIES: _ze_structure_type_t = _ze_structure_type_t(3);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_COMPUTE_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(4);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_MODULE_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(5);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_COMMAND_QUEUE_GROUP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(6);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_MEMORY_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(7);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_MEMORY_ACCESS_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(8);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_CACHE_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(9);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_IMAGE_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(10);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_P2P_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(11);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_EXTERNAL_MEMORY_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(12);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_CONTEXT_DESC: _ze_structure_type_t = _ze_structure_type_t(13);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_COMMAND_QUEUE_DESC: _ze_structure_type_t = _ze_structure_type_t(14);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_COMMAND_LIST_DESC: _ze_structure_type_t = _ze_structure_type_t(15);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EVENT_POOL_DESC: _ze_structure_type_t = _ze_structure_type_t(16);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EVENT_DESC: _ze_structure_type_t = _ze_structure_type_t(17);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_FENCE_DESC: _ze_structure_type_t = _ze_structure_type_t(18);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_IMAGE_DESC: _ze_structure_type_t = _ze_structure_type_t(19);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_IMAGE_PROPERTIES: _ze_structure_type_t = _ze_structure_type_t(20);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_MEM_ALLOC_DESC: _ze_structure_type_t =
        _ze_structure_type_t(21);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_HOST_MEM_ALLOC_DESC: _ze_structure_type_t =
        _ze_structure_type_t(22);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MEMORY_ALLOCATION_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(23);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_EXPORT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(24);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMPORT_FD: _ze_structure_type_t =
        _ze_structure_type_t(25);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_EXPORT_FD: _ze_structure_type_t =
        _ze_structure_type_t(26);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MODULE_DESC: _ze_structure_type_t = _ze_structure_type_t(27);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MODULE_PROPERTIES: _ze_structure_type_t = _ze_structure_type_t(28);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_KERNEL_DESC: _ze_structure_type_t = _ze_structure_type_t(29);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_KERNEL_PROPERTIES: _ze_structure_type_t = _ze_structure_type_t(30);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_SAMPLER_DESC: _ze_structure_type_t = _ze_structure_type_t(31);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_PHYSICAL_MEM_DESC: _ze_structure_type_t = _ze_structure_type_t(32);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_KERNEL_PREFERRED_GROUP_SIZE_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(33);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMPORT_WIN32: _ze_structure_type_t =
        _ze_structure_type_t(34);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_MEMORY_EXPORT_WIN32: _ze_structure_type_t =
        _ze_structure_type_t(35);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_RAYTRACING_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65537);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RAYTRACING_MEM_ALLOC_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(65538);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_FLOAT_ATOMIC_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65539);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_CACHE_RESERVATION_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(65540);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EU_COUNT_EXT: _ze_structure_type_t = _ze_structure_type_t(65541);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_SRGB_EXT_DESC: _ze_structure_type_t = _ze_structure_type_t(65542);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_LINKAGE_INSPECTION_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(65543);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_PCI_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65544);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DRIVER_MEMORY_FREE_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65545);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MEMORY_FREE_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(65546);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MEMORY_COMPRESSION_HINTS_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(65547);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_IMAGE_ALLOCATION_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65548);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_LUID_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65549);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_MEMORY_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65550);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_IP_VERSION_EXT: _ze_structure_type_t =
        _ze_structure_type_t(65551);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_IMAGE_VIEW_PLANAR_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(65552);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65553);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EVENT_QUERY_KERNEL_TIMESTAMPS_RESULTS_EXT_PROPERTIES:
        _ze_structure_type_t = _ze_structure_type_t(65554);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_KERNEL_MAX_GROUP_SIZE_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(65555);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RELAXED_ALLOCATION_LIMITS_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131073);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MODULE_PROGRAM_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131074);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_SCHEDULING_HINT_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131075);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_SCHEDULING_HINT_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131076);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_IMAGE_VIEW_PLANAR_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131077);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_PROPERTIES_1_2: _ze_structure_type_t =
        _ze_structure_type_t(131078);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_IMAGE_MEMORY_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131079);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_POWER_SAVING_HINT_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131080);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_COPY_BANDWIDTH_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131081);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DEVICE_P2P_BANDWIDTH_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131082);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_FABRIC_VERTEX_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131083);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_FABRIC_EDGE_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131084);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MEMORY_SUB_ALLOCATIONS_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131085);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RTAS_BUILDER_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131086);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RTAS_BUILDER_BUILD_OP_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131087);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RTAS_BUILDER_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131088);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RTAS_PARALLEL_OPERATION_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131089);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RTAS_DEVICE_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131090);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_RTAS_GEOMETRY_AABBS_EXP_CB_PARAMS: _ze_structure_type_t =
        _ze_structure_type_t(131091);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_COUNTER_BASED_EVENT_POOL_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131092);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_COMMAND_LIST_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131093);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_COMMAND_LIST_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131094);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_COMMAND_ID_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131095);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_COMMANDS_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131096);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_KERNEL_ARGUMENT_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131097);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_GROUP_COUNT_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131098);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_GROUP_SIZE_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131099);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_GLOBAL_OFFSET_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131100);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_PITCHED_ALLOC_DEVICE_EXP_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131101);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_BINDLESS_IMAGE_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131102);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_PITCHED_IMAGE_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131103);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_MUTABLE_GRAPH_ARGUMENT_EXP_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131104);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_INIT_DRIVER_TYPE_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131105);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131106);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_WIN32_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131107);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_FD_EXT_DESC: _ze_structure_type_t =
        _ze_structure_type_t(131108);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS_EXT: _ze_structure_type_t =
        _ze_structure_type_t(131109);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_WAIT_PARAMS_EXT: _ze_structure_type_t =
        _ze_structure_type_t(131110);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_DRIVER_DDI_HANDLES_EXT_PROPERTIES: _ze_structure_type_t =
        _ze_structure_type_t(131111);
}
impl _ze_structure_type_t {
    pub const ZE_STRUCTURE_TYPE_FORCE_UINT32: _ze_structure_type_t =
        _ze_structure_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_structure_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_structure_type_t as ze_structure_type_t;
pub type ze_external_memory_type_flags_t = u32;
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_FD: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(1);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_DMA_BUF: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(2);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(4);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_OPAQUE_WIN32_KMT: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(8);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(16);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D11_TEXTURE_KMT: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(32);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_HEAP: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(64);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_D3D12_RESOURCE: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(128);
}
impl _ze_external_memory_type_flag_t {
    pub const ZE_EXTERNAL_MEMORY_TYPE_FLAG_FORCE_UINT32: _ze_external_memory_type_flag_t =
        _ze_external_memory_type_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_memory_type_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_external_memory_type_flag_t as ze_external_memory_type_flag_t;
impl _ze_bandwidth_unit_t {
    pub const ZE_BANDWIDTH_UNIT_UNKNOWN: _ze_bandwidth_unit_t = _ze_bandwidth_unit_t(0);
}
impl _ze_bandwidth_unit_t {
    pub const ZE_BANDWIDTH_UNIT_BYTES_PER_NANOSEC: _ze_bandwidth_unit_t = _ze_bandwidth_unit_t(1);
}
impl _ze_bandwidth_unit_t {
    pub const ZE_BANDWIDTH_UNIT_BYTES_PER_CLOCK: _ze_bandwidth_unit_t = _ze_bandwidth_unit_t(2);
}
impl _ze_bandwidth_unit_t {
    pub const ZE_BANDWIDTH_UNIT_FORCE_UINT32: _ze_bandwidth_unit_t =
        _ze_bandwidth_unit_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_bandwidth_unit_t(pub ::core::ffi::c_uint);
pub use self::_ze_bandwidth_unit_t as ze_bandwidth_unit_t;
impl _ze_latency_unit_t {
    pub const ZE_LATENCY_UNIT_UNKNOWN: _ze_latency_unit_t = _ze_latency_unit_t(0);
}
impl _ze_latency_unit_t {
    pub const ZE_LATENCY_UNIT_NANOSEC: _ze_latency_unit_t = _ze_latency_unit_t(1);
}
impl _ze_latency_unit_t {
    pub const ZE_LATENCY_UNIT_CLOCK: _ze_latency_unit_t = _ze_latency_unit_t(2);
}
impl _ze_latency_unit_t {
    pub const ZE_LATENCY_UNIT_HOP: _ze_latency_unit_t = _ze_latency_unit_t(3);
}
impl _ze_latency_unit_t {
    pub const ZE_LATENCY_UNIT_FORCE_UINT32: _ze_latency_unit_t = _ze_latency_unit_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_latency_unit_t(pub ::core::ffi::c_uint);
pub use self::_ze_latency_unit_t as ze_latency_unit_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_uuid_t {
    pub id: [u8; 16usize],
}
pub type ze_uuid_t = _ze_uuid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_base_cb_params_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
}
pub type ze_base_cb_params_t = _ze_base_cb_params_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_base_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
}
pub type ze_base_properties_t = _ze_base_properties_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_base_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
}
pub type ze_base_desc_t = _ze_base_desc_t;
pub type ze_init_driver_type_desc_t = _ze_init_driver_type_desc_t;
pub type ze_driver_uuid_t = _ze_driver_uuid_t;
pub type ze_driver_properties_t = _ze_driver_properties_t;
pub type ze_driver_ipc_properties_t = _ze_driver_ipc_properties_t;
pub type ze_driver_extension_properties_t = _ze_driver_extension_properties_t;
pub type ze_device_uuid_t = _ze_device_uuid_t;
pub type ze_device_properties_t = _ze_device_properties_t;
pub type ze_device_thread_t = _ze_device_thread_t;
pub type ze_device_compute_properties_t = _ze_device_compute_properties_t;
pub type ze_native_kernel_uuid_t = _ze_native_kernel_uuid_t;
pub type ze_device_module_properties_t = _ze_device_module_properties_t;
pub type ze_command_queue_group_properties_t = _ze_command_queue_group_properties_t;
pub type ze_device_memory_properties_t = _ze_device_memory_properties_t;
pub type ze_device_memory_access_properties_t = _ze_device_memory_access_properties_t;
pub type ze_device_cache_properties_t = _ze_device_cache_properties_t;
pub type ze_device_image_properties_t = _ze_device_image_properties_t;
pub type ze_device_external_memory_properties_t = _ze_device_external_memory_properties_t;
pub type ze_device_p2p_properties_t = _ze_device_p2p_properties_t;
pub type ze_context_desc_t = _ze_context_desc_t;
pub type ze_command_queue_desc_t = _ze_command_queue_desc_t;
pub type ze_command_list_desc_t = _ze_command_list_desc_t;
pub type ze_copy_region_t = _ze_copy_region_t;
pub type ze_image_region_t = _ze_image_region_t;
pub type ze_event_pool_desc_t = _ze_event_pool_desc_t;
pub type ze_event_desc_t = _ze_event_desc_t;
pub type ze_kernel_timestamp_data_t = _ze_kernel_timestamp_data_t;
pub type ze_kernel_timestamp_result_t = _ze_kernel_timestamp_result_t;
pub type ze_fence_desc_t = _ze_fence_desc_t;
pub type ze_image_format_t = _ze_image_format_t;
pub type ze_image_desc_t = _ze_image_desc_t;
pub type ze_image_properties_t = _ze_image_properties_t;
pub type ze_device_mem_alloc_desc_t = _ze_device_mem_alloc_desc_t;
pub type ze_host_mem_alloc_desc_t = _ze_host_mem_alloc_desc_t;
pub type ze_memory_allocation_properties_t = _ze_memory_allocation_properties_t;
pub type ze_external_memory_export_desc_t = _ze_external_memory_export_desc_t;
pub type ze_external_memory_import_fd_t = _ze_external_memory_import_fd_t;
pub type ze_external_memory_export_fd_t = _ze_external_memory_export_fd_t;
pub type ze_external_memory_import_win32_handle_t = _ze_external_memory_import_win32_handle_t;
pub type ze_external_memory_export_win32_handle_t = _ze_external_memory_export_win32_handle_t;
pub type ze_module_constants_t = _ze_module_constants_t;
pub type ze_module_desc_t = _ze_module_desc_t;
pub type ze_module_properties_t = _ze_module_properties_t;
pub type ze_kernel_desc_t = _ze_kernel_desc_t;
pub type ze_kernel_uuid_t = _ze_kernel_uuid_t;
pub type ze_kernel_properties_t = _ze_kernel_properties_t;
pub type ze_kernel_preferred_group_size_properties_t = _ze_kernel_preferred_group_size_properties_t;
pub type ze_group_count_t = _ze_group_count_t;
pub type ze_module_program_exp_desc_t = _ze_module_program_exp_desc_t;
pub type ze_device_raytracing_ext_properties_t = _ze_device_raytracing_ext_properties_t;
pub type ze_raytracing_mem_alloc_ext_desc_t = _ze_raytracing_mem_alloc_ext_desc_t;
pub type ze_sampler_desc_t = _ze_sampler_desc_t;
pub type ze_physical_mem_desc_t = _ze_physical_mem_desc_t;
pub type ze_float_atomic_ext_properties_t = _ze_float_atomic_ext_properties_t;
pub type ze_relaxed_allocation_limits_exp_desc_t = _ze_relaxed_allocation_limits_exp_desc_t;
pub type ze_driver_ddi_handles_ext_properties_t = _ze_driver_ddi_handles_ext_properties_t;
pub type ze_external_semaphore_ext_desc_t = _ze_external_semaphore_ext_desc_t;
pub type ze_external_semaphore_win32_ext_desc_t = _ze_external_semaphore_win32_ext_desc_t;
pub type ze_external_semaphore_fd_ext_desc_t = _ze_external_semaphore_fd_ext_desc_t;
pub type ze_external_semaphore_signal_params_ext_t = _ze_external_semaphore_signal_params_ext_t;
pub type ze_external_semaphore_wait_params_ext_t = _ze_external_semaphore_wait_params_ext_t;
pub type ze_cache_reservation_ext_desc_t = _ze_cache_reservation_ext_desc_t;
pub type ze_image_memory_properties_exp_t = _ze_image_memory_properties_exp_t;
pub type ze_image_view_planar_ext_desc_t = _ze_image_view_planar_ext_desc_t;
pub type ze_image_view_planar_exp_desc_t = _ze_image_view_planar_exp_desc_t;
pub type ze_scheduling_hint_exp_properties_t = _ze_scheduling_hint_exp_properties_t;
pub type ze_scheduling_hint_exp_desc_t = _ze_scheduling_hint_exp_desc_t;
pub type ze_context_power_saving_hint_exp_desc_t = _ze_context_power_saving_hint_exp_desc_t;
pub type ze_eu_count_ext_t = _ze_eu_count_ext_t;
pub type ze_pci_address_ext_t = _ze_pci_address_ext_t;
pub type ze_pci_speed_ext_t = _ze_pci_speed_ext_t;
pub type ze_pci_ext_properties_t = _ze_pci_ext_properties_t;
pub type ze_srgb_ext_desc_t = _ze_srgb_ext_desc_t;
pub type ze_image_allocation_ext_properties_t = _ze_image_allocation_ext_properties_t;
pub type ze_linkage_inspection_ext_desc_t = _ze_linkage_inspection_ext_desc_t;
pub type ze_memory_compression_hints_ext_desc_t = _ze_memory_compression_hints_ext_desc_t;
pub type ze_driver_memory_free_ext_properties_t = _ze_driver_memory_free_ext_properties_t;
pub type ze_memory_free_ext_desc_t = _ze_memory_free_ext_desc_t;
pub type ze_device_p2p_bandwidth_exp_properties_t = _ze_device_p2p_bandwidth_exp_properties_t;
pub type ze_copy_bandwidth_exp_properties_t = _ze_copy_bandwidth_exp_properties_t;
pub type ze_device_luid_ext_t = _ze_device_luid_ext_t;
pub type ze_device_luid_ext_properties_t = _ze_device_luid_ext_properties_t;
pub type ze_fabric_vertex_pci_exp_address_t = _ze_fabric_vertex_pci_exp_address_t;
pub type ze_fabric_vertex_exp_properties_t = _ze_fabric_vertex_exp_properties_t;
pub type ze_fabric_edge_exp_properties_t = _ze_fabric_edge_exp_properties_t;
pub type ze_device_memory_ext_properties_t = _ze_device_memory_ext_properties_t;
pub type ze_device_ip_version_ext_t = _ze_device_ip_version_ext_t;
pub type ze_kernel_max_group_size_properties_ext_t = _ze_kernel_max_group_size_properties_ext_t;
pub type ze_sub_allocation_t = _ze_sub_allocation_t;
pub type ze_memory_sub_allocations_exp_properties_t = _ze_memory_sub_allocations_exp_properties_t;
pub type ze_event_query_kernel_timestamps_ext_properties_t =
    _ze_event_query_kernel_timestamps_ext_properties_t;
pub type ze_synchronized_timestamp_data_ext_t = _ze_synchronized_timestamp_data_ext_t;
pub type ze_synchronized_timestamp_result_ext_t = _ze_synchronized_timestamp_result_ext_t;
pub type ze_event_query_kernel_timestamps_results_ext_properties_t =
    _ze_event_query_kernel_timestamps_results_ext_properties_t;
pub type ze_rtas_builder_exp_desc_t = _ze_rtas_builder_exp_desc_t;
pub type ze_rtas_builder_exp_properties_t = _ze_rtas_builder_exp_properties_t;
pub type ze_rtas_parallel_operation_exp_properties_t = _ze_rtas_parallel_operation_exp_properties_t;
pub type ze_rtas_device_exp_properties_t = _ze_rtas_device_exp_properties_t;
pub type ze_rtas_float3_exp_t = _ze_rtas_float3_exp_t;
pub type ze_rtas_transform_float3x4_column_major_exp_t =
    _ze_rtas_transform_float3x4_column_major_exp_t;
pub type ze_rtas_transform_float3x4_aligned_column_major_exp_t =
    _ze_rtas_transform_float3x4_aligned_column_major_exp_t;
pub type ze_rtas_transform_float3x4_row_major_exp_t = _ze_rtas_transform_float3x4_row_major_exp_t;
pub type ze_rtas_aabb_exp_t = _ze_rtas_aabb_exp_t;
pub type ze_rtas_triangle_indices_uint32_exp_t = _ze_rtas_triangle_indices_uint32_exp_t;
pub type ze_rtas_quad_indices_uint32_exp_t = _ze_rtas_quad_indices_uint32_exp_t;
pub type ze_rtas_builder_geometry_info_exp_t = _ze_rtas_builder_geometry_info_exp_t;
pub type ze_rtas_builder_triangles_geometry_info_exp_t =
    _ze_rtas_builder_triangles_geometry_info_exp_t;
pub type ze_rtas_builder_quads_geometry_info_exp_t = _ze_rtas_builder_quads_geometry_info_exp_t;
pub type ze_rtas_geometry_aabbs_exp_cb_params_t = _ze_rtas_geometry_aabbs_exp_cb_params_t;
pub type ze_rtas_builder_procedural_geometry_info_exp_t =
    _ze_rtas_builder_procedural_geometry_info_exp_t;
pub type ze_rtas_builder_instance_geometry_info_exp_t =
    _ze_rtas_builder_instance_geometry_info_exp_t;
pub type ze_rtas_builder_build_op_exp_desc_t = _ze_rtas_builder_build_op_exp_desc_t;
pub type ze_event_pool_counter_based_exp_desc_t = _ze_event_pool_counter_based_exp_desc_t;
pub type ze_image_bindless_exp_desc_t = _ze_image_bindless_exp_desc_t;
pub type ze_image_pitched_exp_desc_t = _ze_image_pitched_exp_desc_t;
pub type ze_device_pitched_alloc_exp_properties_t = _ze_device_pitched_alloc_exp_properties_t;
pub type ze_mutable_command_id_exp_desc_t = _ze_mutable_command_id_exp_desc_t;
pub type ze_mutable_command_list_exp_properties_t = _ze_mutable_command_list_exp_properties_t;
pub type ze_mutable_command_list_exp_desc_t = _ze_mutable_command_list_exp_desc_t;
pub type ze_mutable_commands_exp_desc_t = _ze_mutable_commands_exp_desc_t;
pub type ze_mutable_kernel_argument_exp_desc_t = _ze_mutable_kernel_argument_exp_desc_t;
pub type ze_mutable_group_count_exp_desc_t = _ze_mutable_group_count_exp_desc_t;
pub type ze_mutable_group_size_exp_desc_t = _ze_mutable_group_size_exp_desc_t;
pub type ze_mutable_global_offset_exp_desc_t = _ze_mutable_global_offset_exp_desc_t;
pub type ze_mutable_graph_argument_exp_desc_t = _ze_mutable_graph_argument_exp_desc_t;
pub type ze_init_flags_t = u32;
impl _ze_init_flag_t {
    pub const ZE_INIT_FLAG_GPU_ONLY: _ze_init_flag_t = _ze_init_flag_t(1);
}
impl _ze_init_flag_t {
    pub const ZE_INIT_FLAG_VPU_ONLY: _ze_init_flag_t = _ze_init_flag_t(2);
}
impl _ze_init_flag_t {
    pub const ZE_INIT_FLAG_FORCE_UINT32: _ze_init_flag_t = _ze_init_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_init_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_init_flag_t as ze_init_flag_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeInit(flags: ze_init_flags_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverGet(pCount: *mut u32, phDrivers: *mut ze_driver_handle_t) -> ze_result_t;
}
pub type ze_init_driver_type_flags_t = u32;
impl _ze_init_driver_type_flag_t {
    pub const ZE_INIT_DRIVER_TYPE_FLAG_GPU: _ze_init_driver_type_flag_t =
        _ze_init_driver_type_flag_t(1);
}
impl _ze_init_driver_type_flag_t {
    pub const ZE_INIT_DRIVER_TYPE_FLAG_NPU: _ze_init_driver_type_flag_t =
        _ze_init_driver_type_flag_t(2);
}
impl _ze_init_driver_type_flag_t {
    pub const ZE_INIT_DRIVER_TYPE_FLAG_FORCE_UINT32: _ze_init_driver_type_flag_t =
        _ze_init_driver_type_flag_t(2147483647);
}

// Add Send and Sync implementations for Ze handle types
unsafe impl Send for ze_device_handle_t {}
unsafe impl Sync for ze_device_handle_t {}
unsafe impl Send for ze_context_handle_t {}
unsafe impl Sync for ze_context_handle_t {}
unsafe impl Send for ze_command_queue_handle_t {}
unsafe impl Sync for ze_command_queue_handle_t {}
unsafe impl Send for ze_command_list_handle_t {}
unsafe impl Sync for ze_command_list_handle_t {}
unsafe impl Send for ze_module_handle_t {}
unsafe impl Sync for ze_module_handle_t {}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_init_driver_type_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_init_driver_type_flag_t as ze_init_driver_type_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_init_driver_type_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_init_driver_type_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeInitDrivers(
        pCount: *mut u32,
        phDrivers: *mut ze_driver_handle_t,
        desc: *mut ze_init_driver_type_desc_t,
    ) -> ze_result_t;
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_0: _ze_api_version_t = _ze_api_version_t(65536);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_1: _ze_api_version_t = _ze_api_version_t(65537);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_2: _ze_api_version_t = _ze_api_version_t(65538);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_3: _ze_api_version_t = _ze_api_version_t(65539);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_4: _ze_api_version_t = _ze_api_version_t(65540);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_5: _ze_api_version_t = _ze_api_version_t(65541);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_6: _ze_api_version_t = _ze_api_version_t(65542);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_7: _ze_api_version_t = _ze_api_version_t(65543);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_8: _ze_api_version_t = _ze_api_version_t(65544);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_9: _ze_api_version_t = _ze_api_version_t(65545);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_10: _ze_api_version_t = _ze_api_version_t(65546);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_11: _ze_api_version_t = _ze_api_version_t(65547);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_1_12: _ze_api_version_t = _ze_api_version_t(65548);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_CURRENT: _ze_api_version_t = _ze_api_version_t(65548);
}
impl _ze_api_version_t {
    pub const ZE_API_VERSION_FORCE_UINT32: _ze_api_version_t = _ze_api_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_api_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_api_version_t as ze_api_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverGetApiVersion(
        hDriver: ze_driver_handle_t,
        version: *mut ze_api_version_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_uuid_t {
    pub id: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub uuid: ze_driver_uuid_t,
    pub driverVersion: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverGetProperties(
        hDriver: ze_driver_handle_t,
        pDriverProperties: *mut ze_driver_properties_t,
    ) -> ze_result_t;
}
pub type ze_ipc_property_flags_t = u32;
impl _ze_ipc_property_flag_t {
    pub const ZE_IPC_PROPERTY_FLAG_MEMORY: _ze_ipc_property_flag_t = _ze_ipc_property_flag_t(1);
}
impl _ze_ipc_property_flag_t {
    pub const ZE_IPC_PROPERTY_FLAG_EVENT_POOL: _ze_ipc_property_flag_t = _ze_ipc_property_flag_t(2);
}
impl _ze_ipc_property_flag_t {
    pub const ZE_IPC_PROPERTY_FLAG_FORCE_UINT32: _ze_ipc_property_flag_t =
        _ze_ipc_property_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_ipc_property_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_ipc_property_flag_t as ze_ipc_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_ipc_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_ipc_property_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverGetIpcProperties(
        hDriver: ze_driver_handle_t,
        pIpcProperties: *mut ze_driver_ipc_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_extension_properties_t {
    pub name: [::core::ffi::c_char; 256usize],
    pub version: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverGetExtensionProperties(
        hDriver: ze_driver_handle_t,
        pCount: *mut u32,
        pExtensionProperties: *mut ze_driver_extension_properties_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverGetExtensionFunctionAddress(
        hDriver: ze_driver_handle_t,
        name: *const ::core::ffi::c_char,
        ppFunctionAddress: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverGetLastErrorDescription(
        hDriver: ze_driver_handle_t,
        ppString: *mut *const ::core::ffi::c_char,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGet(
        hDriver: ze_driver_handle_t,
        pCount: *mut u32,
        phDevices: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetRootDevice(
        hDevice: ze_device_handle_t,
        phRootDevice: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetSubDevices(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        phSubdevices: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
impl _ze_device_type_t {
    pub const ZE_DEVICE_TYPE_GPU: _ze_device_type_t = _ze_device_type_t(1);
}
impl _ze_device_type_t {
    pub const ZE_DEVICE_TYPE_CPU: _ze_device_type_t = _ze_device_type_t(2);
}
impl _ze_device_type_t {
    pub const ZE_DEVICE_TYPE_FPGA: _ze_device_type_t = _ze_device_type_t(3);
}
impl _ze_device_type_t {
    pub const ZE_DEVICE_TYPE_MCA: _ze_device_type_t = _ze_device_type_t(4);
}
impl _ze_device_type_t {
    pub const ZE_DEVICE_TYPE_VPU: _ze_device_type_t = _ze_device_type_t(5);
}
impl _ze_device_type_t {
    pub const ZE_DEVICE_TYPE_FORCE_UINT32: _ze_device_type_t = _ze_device_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_type_t as ze_device_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_uuid_t {
    pub id: [u8; 16usize],
}
pub type ze_device_property_flags_t = u32;
impl _ze_device_property_flag_t {
    pub const ZE_DEVICE_PROPERTY_FLAG_INTEGRATED: _ze_device_property_flag_t =
        _ze_device_property_flag_t(1);
}
impl _ze_device_property_flag_t {
    pub const ZE_DEVICE_PROPERTY_FLAG_SUBDEVICE: _ze_device_property_flag_t =
        _ze_device_property_flag_t(2);
}
impl _ze_device_property_flag_t {
    pub const ZE_DEVICE_PROPERTY_FLAG_ECC: _ze_device_property_flag_t =
        _ze_device_property_flag_t(4);
}
impl _ze_device_property_flag_t {
    pub const ZE_DEVICE_PROPERTY_FLAG_ONDEMANDPAGING: _ze_device_property_flag_t =
        _ze_device_property_flag_t(8);
}
impl _ze_device_property_flag_t {
    pub const ZE_DEVICE_PROPERTY_FLAG_FORCE_UINT32: _ze_device_property_flag_t =
        _ze_device_property_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_property_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_property_flag_t as ze_device_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub type_: ze_device_type_t,
    pub vendorId: u32,
    pub deviceId: u32,
    pub flags: ze_device_property_flags_t,
    pub subdeviceId: u32,
    pub coreClockRate: u32,
    pub maxMemAllocSize: u64,
    pub maxHardwareContexts: u32,
    pub maxCommandQueuePriority: u32,
    pub numThreadsPerEU: u32,
    pub physicalEUSimdWidth: u32,
    pub numEUsPerSubslice: u32,
    pub numSubslicesPerSlice: u32,
    pub numSlices: u32,
    pub timerResolution: u64,
    pub timestampValidBits: u32,
    pub kernelTimestampValidBits: u32,
    pub uuid: ze_device_uuid_t,
    pub name: [::core::ffi::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_thread_t {
    pub slice: u32,
    pub subslice: u32,
    pub eu: u32,
    pub thread: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetProperties(
        hDevice: ze_device_handle_t,
        pDeviceProperties: *mut ze_device_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_compute_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxTotalGroupSize: u32,
    pub maxGroupSizeX: u32,
    pub maxGroupSizeY: u32,
    pub maxGroupSizeZ: u32,
    pub maxGroupCountX: u32,
    pub maxGroupCountY: u32,
    pub maxGroupCountZ: u32,
    pub maxSharedLocalMemory: u32,
    pub numSubGroupSizes: u32,
    pub subGroupSizes: [u32; 8usize],
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetComputeProperties(
        hDevice: ze_device_handle_t,
        pComputeProperties: *mut ze_device_compute_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_native_kernel_uuid_t {
    pub id: [u8; 16usize],
}
pub type ze_device_module_flags_t = u32;
impl _ze_device_module_flag_t {
    pub const ZE_DEVICE_MODULE_FLAG_FP16: _ze_device_module_flag_t = _ze_device_module_flag_t(1);
}
impl _ze_device_module_flag_t {
    pub const ZE_DEVICE_MODULE_FLAG_FP64: _ze_device_module_flag_t = _ze_device_module_flag_t(2);
}
impl _ze_device_module_flag_t {
    pub const ZE_DEVICE_MODULE_FLAG_INT64_ATOMICS: _ze_device_module_flag_t =
        _ze_device_module_flag_t(4);
}
impl _ze_device_module_flag_t {
    pub const ZE_DEVICE_MODULE_FLAG_DP4A: _ze_device_module_flag_t = _ze_device_module_flag_t(8);
}
impl _ze_device_module_flag_t {
    pub const ZE_DEVICE_MODULE_FLAG_FORCE_UINT32: _ze_device_module_flag_t =
        _ze_device_module_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_module_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_module_flag_t as ze_device_module_flag_t;
pub type ze_device_fp_flags_t = u32;
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_DENORM: _ze_device_fp_flag_t = _ze_device_fp_flag_t(1);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_INF_NAN: _ze_device_fp_flag_t = _ze_device_fp_flag_t(2);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_ROUND_TO_NEAREST: _ze_device_fp_flag_t = _ze_device_fp_flag_t(4);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_ROUND_TO_ZERO: _ze_device_fp_flag_t = _ze_device_fp_flag_t(8);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_ROUND_TO_INF: _ze_device_fp_flag_t = _ze_device_fp_flag_t(16);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_FMA: _ze_device_fp_flag_t = _ze_device_fp_flag_t(32);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_ROUNDED_DIVIDE_SQRT: _ze_device_fp_flag_t =
        _ze_device_fp_flag_t(64);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_SOFT_FLOAT: _ze_device_fp_flag_t = _ze_device_fp_flag_t(128);
}
impl _ze_device_fp_flag_t {
    pub const ZE_DEVICE_FP_FLAG_FORCE_UINT32: _ze_device_fp_flag_t =
        _ze_device_fp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_fp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_fp_flag_t as ze_device_fp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_module_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub spirvVersionSupported: u32,
    pub flags: ze_device_module_flags_t,
    pub fp16flags: ze_device_fp_flags_t,
    pub fp32flags: ze_device_fp_flags_t,
    pub fp64flags: ze_device_fp_flags_t,
    pub maxArgumentsSize: u32,
    pub printfBufferSize: u32,
    pub nativeKernelSupported: ze_native_kernel_uuid_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetModuleProperties(
        hDevice: ze_device_handle_t,
        pModuleProperties: *mut ze_device_module_properties_t,
    ) -> ze_result_t;
}
pub type ze_command_queue_group_property_flags_t = u32;
impl _ze_command_queue_group_property_flag_t {
    pub const ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_COMPUTE:
        _ze_command_queue_group_property_flag_t = _ze_command_queue_group_property_flag_t(1);
}
impl _ze_command_queue_group_property_flag_t {
    pub const ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_COPY: _ze_command_queue_group_property_flag_t =
        _ze_command_queue_group_property_flag_t(2);
}
impl _ze_command_queue_group_property_flag_t {
    pub const ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_COOPERATIVE_KERNELS:
        _ze_command_queue_group_property_flag_t = _ze_command_queue_group_property_flag_t(4);
}
impl _ze_command_queue_group_property_flag_t {
    pub const ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_METRICS:
        _ze_command_queue_group_property_flag_t = _ze_command_queue_group_property_flag_t(8);
}
impl _ze_command_queue_group_property_flag_t {
    pub const ZE_COMMAND_QUEUE_GROUP_PROPERTY_FLAG_FORCE_UINT32:
        _ze_command_queue_group_property_flag_t =
        _ze_command_queue_group_property_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_group_property_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_command_queue_group_property_flag_t as ze_command_queue_group_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_group_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_command_queue_group_property_flags_t,
    pub maxMemoryFillPatternSize: usize,
    pub numQueues: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetCommandQueueGroupProperties(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pCommandQueueGroupProperties: *mut ze_command_queue_group_properties_t,
    ) -> ze_result_t;
}
pub type ze_device_memory_property_flags_t = u32;
impl _ze_device_memory_property_flag_t {
    pub const ZE_DEVICE_MEMORY_PROPERTY_FLAG_TBD: _ze_device_memory_property_flag_t =
        _ze_device_memory_property_flag_t(1);
}
impl _ze_device_memory_property_flag_t {
    pub const ZE_DEVICE_MEMORY_PROPERTY_FLAG_FORCE_UINT32: _ze_device_memory_property_flag_t =
        _ze_device_memory_property_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_memory_property_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_memory_property_flag_t as ze_device_memory_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_memory_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_device_memory_property_flags_t,
    pub maxClockRate: u32,
    pub maxBusWidth: u32,
    pub totalSize: u64,
    pub name: [::core::ffi::c_char; 256usize],
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetMemoryProperties(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pMemProperties: *mut ze_device_memory_properties_t,
    ) -> ze_result_t;
}
pub type ze_memory_access_cap_flags_t = u32;
impl _ze_memory_access_cap_flag_t {
    pub const ZE_MEMORY_ACCESS_CAP_FLAG_RW: _ze_memory_access_cap_flag_t =
        _ze_memory_access_cap_flag_t(1);
}
impl _ze_memory_access_cap_flag_t {
    pub const ZE_MEMORY_ACCESS_CAP_FLAG_ATOMIC: _ze_memory_access_cap_flag_t =
        _ze_memory_access_cap_flag_t(2);
}
impl _ze_memory_access_cap_flag_t {
    pub const ZE_MEMORY_ACCESS_CAP_FLAG_CONCURRENT: _ze_memory_access_cap_flag_t =
        _ze_memory_access_cap_flag_t(4);
}
impl _ze_memory_access_cap_flag_t {
    pub const ZE_MEMORY_ACCESS_CAP_FLAG_CONCURRENT_ATOMIC: _ze_memory_access_cap_flag_t =
        _ze_memory_access_cap_flag_t(8);
}
impl _ze_memory_access_cap_flag_t {
    pub const ZE_MEMORY_ACCESS_CAP_FLAG_FORCE_UINT32: _ze_memory_access_cap_flag_t =
        _ze_memory_access_cap_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_access_cap_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_access_cap_flag_t as ze_memory_access_cap_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_memory_access_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub hostAllocCapabilities: ze_memory_access_cap_flags_t,
    pub deviceAllocCapabilities: ze_memory_access_cap_flags_t,
    pub sharedSingleDeviceAllocCapabilities: ze_memory_access_cap_flags_t,
    pub sharedCrossDeviceAllocCapabilities: ze_memory_access_cap_flags_t,
    pub sharedSystemAllocCapabilities: ze_memory_access_cap_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetMemoryAccessProperties(
        hDevice: ze_device_handle_t,
        pMemAccessProperties: *mut ze_device_memory_access_properties_t,
    ) -> ze_result_t;
}
pub type ze_device_cache_property_flags_t = u32;
impl _ze_device_cache_property_flag_t {
    pub const ZE_DEVICE_CACHE_PROPERTY_FLAG_USER_CONTROL: _ze_device_cache_property_flag_t =
        _ze_device_cache_property_flag_t(1);
}
impl _ze_device_cache_property_flag_t {
    pub const ZE_DEVICE_CACHE_PROPERTY_FLAG_FORCE_UINT32: _ze_device_cache_property_flag_t =
        _ze_device_cache_property_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_cache_property_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_cache_property_flag_t as ze_device_cache_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_cache_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_device_cache_property_flags_t,
    pub cacheSize: usize,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetCacheProperties(
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pCacheProperties: *mut ze_device_cache_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_image_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxImageDims1D: u32,
    pub maxImageDims2D: u32,
    pub maxImageDims3D: u32,
    pub maxImageBufferSize: u64,
    pub maxImageArraySlices: u32,
    pub maxSamplers: u32,
    pub maxReadImageArgs: u32,
    pub maxWriteImageArgs: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetImageProperties(
        hDevice: ze_device_handle_t,
        pImageProperties: *mut ze_device_image_properties_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_external_memory_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub memoryAllocationImportTypes: ze_external_memory_type_flags_t,
    pub memoryAllocationExportTypes: ze_external_memory_type_flags_t,
    pub imageImportTypes: ze_external_memory_type_flags_t,
    pub imageExportTypes: ze_external_memory_type_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetExternalMemoryProperties(
        hDevice: ze_device_handle_t,
        pExternalMemoryProperties: *mut ze_device_external_memory_properties_t,
    ) -> ze_result_t;
}
pub type ze_device_p2p_property_flags_t = u32;
impl _ze_device_p2p_property_flag_t {
    pub const ZE_DEVICE_P2P_PROPERTY_FLAG_ACCESS: _ze_device_p2p_property_flag_t =
        _ze_device_p2p_property_flag_t(1);
}
impl _ze_device_p2p_property_flag_t {
    pub const ZE_DEVICE_P2P_PROPERTY_FLAG_ATOMICS: _ze_device_p2p_property_flag_t =
        _ze_device_p2p_property_flag_t(2);
}
impl _ze_device_p2p_property_flag_t {
    pub const ZE_DEVICE_P2P_PROPERTY_FLAG_FORCE_UINT32: _ze_device_p2p_property_flag_t =
        _ze_device_p2p_property_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_p2p_property_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_p2p_property_flag_t as ze_device_p2p_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_p2p_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_device_p2p_property_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetP2PProperties(
        hDevice: ze_device_handle_t,
        hPeerDevice: ze_device_handle_t,
        pP2PProperties: *mut ze_device_p2p_properties_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceCanAccessPeer(
        hDevice: ze_device_handle_t,
        hPeerDevice: ze_device_handle_t,
        value: *mut ze_bool_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetStatus(hDevice: ze_device_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetGlobalTimestamps(
        hDevice: ze_device_handle_t,
        hostTimestamp: *mut u64,
        deviceTimestamp: *mut u64,
    ) -> ze_result_t;
}
pub type ze_context_flags_t = u32;
impl _ze_context_flag_t {
    pub const ZE_CONTEXT_FLAG_TBD: _ze_context_flag_t = _ze_context_flag_t(1);
}
impl _ze_context_flag_t {
    pub const ZE_CONTEXT_FLAG_FORCE_UINT32: _ze_context_flag_t = _ze_context_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_context_flag_t as ze_context_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_context_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextCreate(
        hDriver: ze_driver_handle_t,
        desc: *const ze_context_desc_t,
        phContext: *mut ze_context_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextCreateEx(
        hDriver: ze_driver_handle_t,
        desc: *const ze_context_desc_t,
        numDevices: u32,
        phDevices: *mut ze_device_handle_t,
        phContext: *mut ze_context_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextDestroy(hContext: ze_context_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextGetStatus(hContext: ze_context_handle_t) -> ze_result_t;
}
pub type ze_command_queue_flags_t = u32;
impl _ze_command_queue_flag_t {
    pub const ZE_COMMAND_QUEUE_FLAG_EXPLICIT_ONLY: _ze_command_queue_flag_t =
        _ze_command_queue_flag_t(1);
}
impl _ze_command_queue_flag_t {
    pub const ZE_COMMAND_QUEUE_FLAG_IN_ORDER: _ze_command_queue_flag_t =
        _ze_command_queue_flag_t(2);
}
impl _ze_command_queue_flag_t {
    pub const ZE_COMMAND_QUEUE_FLAG_FORCE_UINT32: _ze_command_queue_flag_t =
        _ze_command_queue_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_command_queue_flag_t as ze_command_queue_flag_t;
impl _ze_command_queue_mode_t {
    pub const ZE_COMMAND_QUEUE_MODE_DEFAULT: _ze_command_queue_mode_t = _ze_command_queue_mode_t(0);
}
impl _ze_command_queue_mode_t {
    pub const ZE_COMMAND_QUEUE_MODE_SYNCHRONOUS: _ze_command_queue_mode_t =
        _ze_command_queue_mode_t(1);
}
impl _ze_command_queue_mode_t {
    pub const ZE_COMMAND_QUEUE_MODE_ASYNCHRONOUS: _ze_command_queue_mode_t =
        _ze_command_queue_mode_t(2);
}
impl _ze_command_queue_mode_t {
    pub const ZE_COMMAND_QUEUE_MODE_FORCE_UINT32: _ze_command_queue_mode_t =
        _ze_command_queue_mode_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_mode_t(pub ::core::ffi::c_uint);
pub use self::_ze_command_queue_mode_t as ze_command_queue_mode_t;
impl _ze_command_queue_priority_t {
    pub const ZE_COMMAND_QUEUE_PRIORITY_NORMAL: _ze_command_queue_priority_t =
        _ze_command_queue_priority_t(0);
}
impl _ze_command_queue_priority_t {
    pub const ZE_COMMAND_QUEUE_PRIORITY_PRIORITY_LOW: _ze_command_queue_priority_t =
        _ze_command_queue_priority_t(1);
}
impl _ze_command_queue_priority_t {
    pub const ZE_COMMAND_QUEUE_PRIORITY_PRIORITY_HIGH: _ze_command_queue_priority_t =
        _ze_command_queue_priority_t(2);
}
impl _ze_command_queue_priority_t {
    pub const ZE_COMMAND_QUEUE_PRIORITY_FORCE_UINT32: _ze_command_queue_priority_t =
        _ze_command_queue_priority_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_priority_t(pub ::core::ffi::c_uint);
pub use self::_ze_command_queue_priority_t as ze_command_queue_priority_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub ordinal: u32,
    pub index: u32,
    pub flags: ze_command_queue_flags_t,
    pub mode: ze_command_queue_mode_t,
    pub priority: ze_command_queue_priority_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandQueueCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_command_queue_desc_t,
        phCommandQueue: *mut ze_command_queue_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandQueueDestroy(hCommandQueue: ze_command_queue_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandQueueExecuteCommandLists(
        hCommandQueue: ze_command_queue_handle_t,
        numCommandLists: u32,
        phCommandLists: &ze_command_list_handle_t,
        hFence: ze_fence_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandQueueSynchronize(
        hCommandQueue: ze_command_queue_handle_t,
        timeout: u64,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandQueueGetOrdinal(
        hCommandQueue: ze_command_queue_handle_t,
        pOrdinal: *mut u32,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandQueueGetIndex(
        hCommandQueue: ze_command_queue_handle_t,
        pIndex: *mut u32,
    ) -> ze_result_t;
}
pub type ze_command_list_flags_t = u32;
impl _ze_command_list_flag_t {
    pub const ZE_COMMAND_LIST_FLAG_RELAXED_ORDERING: _ze_command_list_flag_t =
        _ze_command_list_flag_t(1);
}
impl _ze_command_list_flag_t {
    pub const ZE_COMMAND_LIST_FLAG_MAXIMIZE_THROUGHPUT: _ze_command_list_flag_t =
        _ze_command_list_flag_t(2);
}
impl _ze_command_list_flag_t {
    pub const ZE_COMMAND_LIST_FLAG_EXPLICIT_ONLY: _ze_command_list_flag_t =
        _ze_command_list_flag_t(4);
}
impl _ze_command_list_flag_t {
    pub const ZE_COMMAND_LIST_FLAG_IN_ORDER: _ze_command_list_flag_t = _ze_command_list_flag_t(8);
}
impl _ze_command_list_flag_t {
    pub const ZE_COMMAND_LIST_FLAG_EXP_CLONEABLE: _ze_command_list_flag_t =
        _ze_command_list_flag_t(16);
}
impl _ze_command_list_flag_t {
    pub const ZE_COMMAND_LIST_FLAG_FORCE_UINT32: _ze_command_list_flag_t =
        _ze_command_list_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_command_list_flag_t as ze_command_list_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub commandQueueGroupOrdinal: u32,
    pub flags: ze_command_list_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_command_list_desc_t,
        phCommandList: *mut ze_command_list_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListCreateImmediate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        altdesc: *const ze_command_queue_desc_t,
        phCommandList: *mut ze_command_list_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListDestroy(hCommandList: ze_command_list_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListClose(hCommandList: ze_command_list_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListReset(hCommandList: ze_command_list_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendWriteGlobalTimestamp(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut u64,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListHostSynchronize(
        hCommandList: ze_command_list_handle_t,
        timeout: u64,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListGetDeviceHandle(
        hCommandList: ze_command_list_handle_t,
        phDevice: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListGetContextHandle(
        hCommandList: ze_command_list_handle_t,
        phContext: *mut ze_context_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListGetOrdinal(
        hCommandList: ze_command_list_handle_t,
        pOrdinal: *mut u32,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListImmediateGetIndex(
        hCommandListImmediate: ze_command_list_handle_t,
        pIndex: *mut u32,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListIsImmediate(
        hCommandList: ze_command_list_handle_t,
        pIsImmediate: *mut ze_bool_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendBarrier(
        hCommandList: ze_command_list_handle_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendMemoryRangesBarrier(
        hCommandList: ze_command_list_handle_t,
        numRanges: u32,
        pRangeSizes: *const usize,
        pRanges: *mut *const ::core::ffi::c_void,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextSystemBarrier(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendMemoryCopy(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::core::ffi::c_void,
        srcptr: *const ::core::ffi::c_void,
        size: usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendMemoryFill(
        hCommandList: ze_command_list_handle_t,
        ptr: *mut ::core::ffi::c_void,
        pattern: *const ::core::ffi::c_void,
        pattern_size: usize,
        size: usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_copy_region_t {
    pub originX: u32,
    pub originY: u32,
    pub originZ: u32,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendMemoryCopyRegion(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::core::ffi::c_void,
        dstRegion: *const ze_copy_region_t,
        dstPitch: u32,
        dstSlicePitch: u32,
        srcptr: *const ::core::ffi::c_void,
        srcRegion: *const ze_copy_region_t,
        srcPitch: u32,
        srcSlicePitch: u32,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendMemoryCopyFromContext(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::core::ffi::c_void,
        hContextSrc: ze_context_handle_t,
        srcptr: *const ::core::ffi::c_void,
        size: usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendImageCopy(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        hSrcImage: ze_image_handle_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_region_t {
    pub originX: u32,
    pub originY: u32,
    pub originZ: u32,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendImageCopyRegion(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        hSrcImage: ze_image_handle_t,
        pDstRegion: *const ze_image_region_t,
        pSrcRegion: *const ze_image_region_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendImageCopyToMemory(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::core::ffi::c_void,
        hSrcImage: ze_image_handle_t,
        pSrcRegion: *const ze_image_region_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendImageCopyFromMemory(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        srcptr: *const ::core::ffi::c_void,
        pDstRegion: *const ze_image_region_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendMemoryPrefetch(
        hCommandList: ze_command_list_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
    ) -> ze_result_t;
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_SET_READ_MOSTLY: _ze_memory_advice_t = _ze_memory_advice_t(0);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_CLEAR_READ_MOSTLY: _ze_memory_advice_t = _ze_memory_advice_t(1);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_SET_PREFERRED_LOCATION: _ze_memory_advice_t = _ze_memory_advice_t(2);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_CLEAR_PREFERRED_LOCATION: _ze_memory_advice_t =
        _ze_memory_advice_t(3);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_SET_NON_ATOMIC_MOSTLY: _ze_memory_advice_t = _ze_memory_advice_t(4);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_CLEAR_NON_ATOMIC_MOSTLY: _ze_memory_advice_t =
        _ze_memory_advice_t(5);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_BIAS_CACHED: _ze_memory_advice_t = _ze_memory_advice_t(6);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_BIAS_UNCACHED: _ze_memory_advice_t = _ze_memory_advice_t(7);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_SET_SYSTEM_MEMORY_PREFERRED_LOCATION: _ze_memory_advice_t =
        _ze_memory_advice_t(8);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_CLEAR_SYSTEM_MEMORY_PREFERRED_LOCATION: _ze_memory_advice_t =
        _ze_memory_advice_t(9);
}
impl _ze_memory_advice_t {
    pub const ZE_MEMORY_ADVICE_FORCE_UINT32: _ze_memory_advice_t = _ze_memory_advice_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_advice_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_advice_t as ze_memory_advice_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendMemAdvise(
        hCommandList: ze_command_list_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
        advice: ze_memory_advice_t,
    ) -> ze_result_t;
}
pub type ze_event_pool_flags_t = u32;
impl _ze_event_pool_flag_t {
    pub const ZE_EVENT_POOL_FLAG_HOST_VISIBLE: _ze_event_pool_flag_t = _ze_event_pool_flag_t(1);
}
impl _ze_event_pool_flag_t {
    pub const ZE_EVENT_POOL_FLAG_IPC: _ze_event_pool_flag_t = _ze_event_pool_flag_t(2);
}
impl _ze_event_pool_flag_t {
    pub const ZE_EVENT_POOL_FLAG_KERNEL_TIMESTAMP: _ze_event_pool_flag_t = _ze_event_pool_flag_t(4);
}
impl _ze_event_pool_flag_t {
    pub const ZE_EVENT_POOL_FLAG_KERNEL_MAPPED_TIMESTAMP: _ze_event_pool_flag_t =
        _ze_event_pool_flag_t(8);
}
impl _ze_event_pool_flag_t {
    pub const ZE_EVENT_POOL_FLAG_FORCE_UINT32: _ze_event_pool_flag_t =
        _ze_event_pool_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_event_pool_flag_t as ze_event_pool_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_event_pool_flags_t,
    pub count: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolCreate(
        hContext: ze_context_handle_t,
        desc: *const ze_event_pool_desc_t,
        numDevices: u32,
        phDevices: *mut ze_device_handle_t,
        phEventPool: *mut ze_event_pool_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolDestroy(hEventPool: ze_event_pool_handle_t) -> ze_result_t;
}
pub type ze_event_scope_flags_t = u32;
impl _ze_event_scope_flag_t {
    pub const ZE_EVENT_SCOPE_FLAG_SUBDEVICE: _ze_event_scope_flag_t = _ze_event_scope_flag_t(1);
}
impl _ze_event_scope_flag_t {
    pub const ZE_EVENT_SCOPE_FLAG_DEVICE: _ze_event_scope_flag_t = _ze_event_scope_flag_t(2);
}
impl _ze_event_scope_flag_t {
    pub const ZE_EVENT_SCOPE_FLAG_HOST: _ze_event_scope_flag_t = _ze_event_scope_flag_t(4);
}
impl _ze_event_scope_flag_t {
    pub const ZE_EVENT_SCOPE_FLAG_FORCE_UINT32: _ze_event_scope_flag_t =
        _ze_event_scope_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_scope_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_event_scope_flag_t as ze_event_scope_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub index: u32,
    pub signal: ze_event_scope_flags_t,
    pub wait: ze_event_scope_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventCreate(
        hEventPool: ze_event_pool_handle_t,
        desc: *const ze_event_desc_t,
        phEvent: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventDestroy(hEvent: ze_event_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolGetIpcHandle(
        hEventPool: ze_event_pool_handle_t,
        phIpc: *mut ze_ipc_event_pool_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolPutIpcHandle(
        hContext: ze_context_handle_t,
        hIpc: ze_ipc_event_pool_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolOpenIpcHandle(
        hContext: ze_context_handle_t,
        hIpc: ze_ipc_event_pool_handle_t,
        phEventPool: *mut ze_event_pool_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolCloseIpcHandle(hEventPool: ze_event_pool_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendSignalEvent(
        hCommandList: ze_command_list_handle_t,
        hEvent: ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendWaitOnEvents(
        hCommandList: ze_command_list_handle_t,
        numEvents: u32,
        phEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventHostSignal(hEvent: ze_event_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventHostSynchronize(hEvent: ze_event_handle_t, timeout: u64) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventQueryStatus(hEvent: ze_event_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendEventReset(
        hCommandList: ze_command_list_handle_t,
        hEvent: ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventHostReset(hEvent: ze_event_handle_t) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_timestamp_data_t {
    pub kernelStart: u64,
    pub kernelEnd: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_timestamp_result_t {
    pub global: ze_kernel_timestamp_data_t,
    pub context: ze_kernel_timestamp_data_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventQueryKernelTimestamp(
        hEvent: ze_event_handle_t,
        dstptr: *mut ze_kernel_timestamp_result_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendQueryKernelTimestamps(
        hCommandList: ze_command_list_handle_t,
        numEvents: u32,
        phEvents: *mut ze_event_handle_t,
        dstptr: *mut ::core::ffi::c_void,
        pOffsets: *const usize,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventGetEventPool(
        hEvent: ze_event_handle_t,
        phEventPool: *mut ze_event_pool_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventGetSignalScope(
        hEvent: ze_event_handle_t,
        pSignalScope: *mut ze_event_scope_flags_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventGetWaitScope(
        hEvent: ze_event_handle_t,
        pWaitScope: *mut ze_event_scope_flags_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolGetContextHandle(
        hEventPool: ze_event_pool_handle_t,
        phContext: *mut ze_context_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventPoolGetFlags(
        hEventPool: ze_event_pool_handle_t,
        pFlags: *mut ze_event_pool_flags_t,
    ) -> ze_result_t;
}
pub type ze_fence_flags_t = u32;
impl _ze_fence_flag_t {
    pub const ZE_FENCE_FLAG_SIGNALED: _ze_fence_flag_t = _ze_fence_flag_t(1);
}
impl _ze_fence_flag_t {
    pub const ZE_FENCE_FLAG_FORCE_UINT32: _ze_fence_flag_t = _ze_fence_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_fence_flag_t as ze_fence_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_fence_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFenceCreate(
        hCommandQueue: ze_command_queue_handle_t,
        desc: *const ze_fence_desc_t,
        phFence: *mut ze_fence_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFenceDestroy(hFence: ze_fence_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFenceHostSynchronize(hFence: ze_fence_handle_t, timeout: u64) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFenceQueryStatus(hFence: ze_fence_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFenceReset(hFence: ze_fence_handle_t) -> ze_result_t;
}
pub type ze_image_flags_t = u32;
impl _ze_image_flag_t {
    pub const ZE_IMAGE_FLAG_KERNEL_WRITE: _ze_image_flag_t = _ze_image_flag_t(1);
}
impl _ze_image_flag_t {
    pub const ZE_IMAGE_FLAG_BIAS_UNCACHED: _ze_image_flag_t = _ze_image_flag_t(2);
}
impl _ze_image_flag_t {
    pub const ZE_IMAGE_FLAG_FORCE_UINT32: _ze_image_flag_t = _ze_image_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_flag_t as ze_image_flag_t;
impl _ze_image_type_t {
    pub const ZE_IMAGE_TYPE_1D: _ze_image_type_t = _ze_image_type_t(0);
}
impl _ze_image_type_t {
    pub const ZE_IMAGE_TYPE_1DARRAY: _ze_image_type_t = _ze_image_type_t(1);
}
impl _ze_image_type_t {
    pub const ZE_IMAGE_TYPE_2D: _ze_image_type_t = _ze_image_type_t(2);
}
impl _ze_image_type_t {
    pub const ZE_IMAGE_TYPE_2DARRAY: _ze_image_type_t = _ze_image_type_t(3);
}
impl _ze_image_type_t {
    pub const ZE_IMAGE_TYPE_3D: _ze_image_type_t = _ze_image_type_t(4);
}
impl _ze_image_type_t {
    pub const ZE_IMAGE_TYPE_BUFFER: _ze_image_type_t = _ze_image_type_t(5);
}
impl _ze_image_type_t {
    pub const ZE_IMAGE_TYPE_FORCE_UINT32: _ze_image_type_t = _ze_image_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_type_t as ze_image_type_t;
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_8: _ze_image_format_layout_t = _ze_image_format_layout_t(0);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_16: _ze_image_format_layout_t = _ze_image_format_layout_t(1);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_32: _ze_image_format_layout_t = _ze_image_format_layout_t(2);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_8_8: _ze_image_format_layout_t = _ze_image_format_layout_t(3);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_8_8_8_8: _ze_image_format_layout_t =
        _ze_image_format_layout_t(4);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_16_16: _ze_image_format_layout_t =
        _ze_image_format_layout_t(5);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_16_16_16_16: _ze_image_format_layout_t =
        _ze_image_format_layout_t(6);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_32_32: _ze_image_format_layout_t =
        _ze_image_format_layout_t(7);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_32_32_32_32: _ze_image_format_layout_t =
        _ze_image_format_layout_t(8);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_10_10_10_2: _ze_image_format_layout_t =
        _ze_image_format_layout_t(9);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_11_11_10: _ze_image_format_layout_t =
        _ze_image_format_layout_t(10);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_5_6_5: _ze_image_format_layout_t =
        _ze_image_format_layout_t(11);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_5_5_5_1: _ze_image_format_layout_t =
        _ze_image_format_layout_t(12);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_4_4_4_4: _ze_image_format_layout_t =
        _ze_image_format_layout_t(13);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_Y8: _ze_image_format_layout_t = _ze_image_format_layout_t(14);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_NV12: _ze_image_format_layout_t =
        _ze_image_format_layout_t(15);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_YUYV: _ze_image_format_layout_t =
        _ze_image_format_layout_t(16);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_VYUY: _ze_image_format_layout_t =
        _ze_image_format_layout_t(17);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_YVYU: _ze_image_format_layout_t =
        _ze_image_format_layout_t(18);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_UYVY: _ze_image_format_layout_t =
        _ze_image_format_layout_t(19);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_AYUV: _ze_image_format_layout_t =
        _ze_image_format_layout_t(20);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_P010: _ze_image_format_layout_t =
        _ze_image_format_layout_t(21);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_Y410: _ze_image_format_layout_t =
        _ze_image_format_layout_t(22);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_P012: _ze_image_format_layout_t =
        _ze_image_format_layout_t(23);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_Y16: _ze_image_format_layout_t = _ze_image_format_layout_t(24);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_P016: _ze_image_format_layout_t =
        _ze_image_format_layout_t(25);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_Y216: _ze_image_format_layout_t =
        _ze_image_format_layout_t(26);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_P216: _ze_image_format_layout_t =
        _ze_image_format_layout_t(27);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_P8: _ze_image_format_layout_t = _ze_image_format_layout_t(28);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_YUY2: _ze_image_format_layout_t =
        _ze_image_format_layout_t(29);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_A8P8: _ze_image_format_layout_t =
        _ze_image_format_layout_t(30);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_IA44: _ze_image_format_layout_t =
        _ze_image_format_layout_t(31);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_AI44: _ze_image_format_layout_t =
        _ze_image_format_layout_t(32);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_Y416: _ze_image_format_layout_t =
        _ze_image_format_layout_t(33);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_Y210: _ze_image_format_layout_t =
        _ze_image_format_layout_t(34);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_I420: _ze_image_format_layout_t =
        _ze_image_format_layout_t(35);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_YV12: _ze_image_format_layout_t =
        _ze_image_format_layout_t(36);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_400P: _ze_image_format_layout_t =
        _ze_image_format_layout_t(37);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_422H: _ze_image_format_layout_t =
        _ze_image_format_layout_t(38);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_422V: _ze_image_format_layout_t =
        _ze_image_format_layout_t(39);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_444P: _ze_image_format_layout_t =
        _ze_image_format_layout_t(40);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_RGBP: _ze_image_format_layout_t =
        _ze_image_format_layout_t(41);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_BRGP: _ze_image_format_layout_t =
        _ze_image_format_layout_t(42);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_8_8_8: _ze_image_format_layout_t =
        _ze_image_format_layout_t(43);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_16_16_16: _ze_image_format_layout_t =
        _ze_image_format_layout_t(44);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_32_32_32: _ze_image_format_layout_t =
        _ze_image_format_layout_t(45);
}
impl _ze_image_format_layout_t {
    pub const ZE_IMAGE_FORMAT_LAYOUT_FORCE_UINT32: _ze_image_format_layout_t =
        _ze_image_format_layout_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_format_layout_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_format_layout_t as ze_image_format_layout_t;
impl _ze_image_format_type_t {
    pub const ZE_IMAGE_FORMAT_TYPE_UINT: _ze_image_format_type_t = _ze_image_format_type_t(0);
}
impl _ze_image_format_type_t {
    pub const ZE_IMAGE_FORMAT_TYPE_SINT: _ze_image_format_type_t = _ze_image_format_type_t(1);
}
impl _ze_image_format_type_t {
    pub const ZE_IMAGE_FORMAT_TYPE_UNORM: _ze_image_format_type_t = _ze_image_format_type_t(2);
}
impl _ze_image_format_type_t {
    pub const ZE_IMAGE_FORMAT_TYPE_SNORM: _ze_image_format_type_t = _ze_image_format_type_t(3);
}
impl _ze_image_format_type_t {
    pub const ZE_IMAGE_FORMAT_TYPE_FLOAT: _ze_image_format_type_t = _ze_image_format_type_t(4);
}
impl _ze_image_format_type_t {
    pub const ZE_IMAGE_FORMAT_TYPE_FORCE_UINT32: _ze_image_format_type_t =
        _ze_image_format_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_format_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_format_type_t as ze_image_format_type_t;
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_R: _ze_image_format_swizzle_t = _ze_image_format_swizzle_t(0);
}
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_G: _ze_image_format_swizzle_t = _ze_image_format_swizzle_t(1);
}
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_B: _ze_image_format_swizzle_t = _ze_image_format_swizzle_t(2);
}
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_A: _ze_image_format_swizzle_t = _ze_image_format_swizzle_t(3);
}
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_0: _ze_image_format_swizzle_t = _ze_image_format_swizzle_t(4);
}
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_1: _ze_image_format_swizzle_t = _ze_image_format_swizzle_t(5);
}
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_X: _ze_image_format_swizzle_t = _ze_image_format_swizzle_t(6);
}
impl _ze_image_format_swizzle_t {
    pub const ZE_IMAGE_FORMAT_SWIZZLE_FORCE_UINT32: _ze_image_format_swizzle_t =
        _ze_image_format_swizzle_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_format_swizzle_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_format_swizzle_t as ze_image_format_swizzle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_format_t {
    pub layout: ze_image_format_layout_t,
    pub type_: ze_image_format_type_t,
    pub x: ze_image_format_swizzle_t,
    pub y: ze_image_format_swizzle_t,
    pub z: ze_image_format_swizzle_t,
    pub w: ze_image_format_swizzle_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_image_flags_t,
    pub type_: ze_image_type_t,
    pub format: ze_image_format_t,
    pub width: u64,
    pub height: u32,
    pub depth: u32,
    pub arraylevels: u32,
    pub miplevels: u32,
}
pub type ze_image_sampler_filter_flags_t = u32;
impl _ze_image_sampler_filter_flag_t {
    pub const ZE_IMAGE_SAMPLER_FILTER_FLAG_POINT: _ze_image_sampler_filter_flag_t =
        _ze_image_sampler_filter_flag_t(1);
}
impl _ze_image_sampler_filter_flag_t {
    pub const ZE_IMAGE_SAMPLER_FILTER_FLAG_LINEAR: _ze_image_sampler_filter_flag_t =
        _ze_image_sampler_filter_flag_t(2);
}
impl _ze_image_sampler_filter_flag_t {
    pub const ZE_IMAGE_SAMPLER_FILTER_FLAG_FORCE_UINT32: _ze_image_sampler_filter_flag_t =
        _ze_image_sampler_filter_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_sampler_filter_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_sampler_filter_flag_t as ze_image_sampler_filter_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub samplerFilterFlags: ze_image_sampler_filter_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeImageGetProperties(
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        pImageProperties: *mut ze_image_properties_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeImageCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        phImage: *mut ze_image_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeImageDestroy(hImage: ze_image_handle_t) -> ze_result_t;
}
pub type ze_device_mem_alloc_flags_t = u32;
impl _ze_device_mem_alloc_flag_t {
    pub const ZE_DEVICE_MEM_ALLOC_FLAG_BIAS_CACHED: _ze_device_mem_alloc_flag_t =
        _ze_device_mem_alloc_flag_t(1);
}
impl _ze_device_mem_alloc_flag_t {
    pub const ZE_DEVICE_MEM_ALLOC_FLAG_BIAS_UNCACHED: _ze_device_mem_alloc_flag_t =
        _ze_device_mem_alloc_flag_t(2);
}
impl _ze_device_mem_alloc_flag_t {
    pub const ZE_DEVICE_MEM_ALLOC_FLAG_BIAS_INITIAL_PLACEMENT: _ze_device_mem_alloc_flag_t =
        _ze_device_mem_alloc_flag_t(4);
}
impl _ze_device_mem_alloc_flag_t {
    pub const ZE_DEVICE_MEM_ALLOC_FLAG_FORCE_UINT32: _ze_device_mem_alloc_flag_t =
        _ze_device_mem_alloc_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_mem_alloc_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_mem_alloc_flag_t as ze_device_mem_alloc_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_mem_alloc_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_device_mem_alloc_flags_t,
    pub ordinal: u32,
}
pub type ze_host_mem_alloc_flags_t = u32;
impl _ze_host_mem_alloc_flag_t {
    pub const ZE_HOST_MEM_ALLOC_FLAG_BIAS_CACHED: _ze_host_mem_alloc_flag_t =
        _ze_host_mem_alloc_flag_t(1);
}
impl _ze_host_mem_alloc_flag_t {
    pub const ZE_HOST_MEM_ALLOC_FLAG_BIAS_UNCACHED: _ze_host_mem_alloc_flag_t =
        _ze_host_mem_alloc_flag_t(2);
}
impl _ze_host_mem_alloc_flag_t {
    pub const ZE_HOST_MEM_ALLOC_FLAG_BIAS_WRITE_COMBINED: _ze_host_mem_alloc_flag_t =
        _ze_host_mem_alloc_flag_t(4);
}
impl _ze_host_mem_alloc_flag_t {
    pub const ZE_HOST_MEM_ALLOC_FLAG_BIAS_INITIAL_PLACEMENT: _ze_host_mem_alloc_flag_t =
        _ze_host_mem_alloc_flag_t(8);
}
impl _ze_host_mem_alloc_flag_t {
    pub const ZE_HOST_MEM_ALLOC_FLAG_FORCE_UINT32: _ze_host_mem_alloc_flag_t =
        _ze_host_mem_alloc_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_host_mem_alloc_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_host_mem_alloc_flag_t as ze_host_mem_alloc_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_host_mem_alloc_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_host_mem_alloc_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemAllocShared(
        hContext: ze_context_handle_t,
        device_desc: *const ze_device_mem_alloc_desc_t,
        host_desc: *const ze_host_mem_alloc_desc_t,
        size: usize,
        alignment: usize,
        hDevice: ze_device_handle_t,
        pptr: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemAllocDevice(
        hContext: ze_context_handle_t,
        device_desc: *const ze_device_mem_alloc_desc_t,
        size: usize,
        alignment: usize,
        hDevice: ze_device_handle_t,
        pptr: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemAllocHost(
        hContext: ze_context_handle_t,
        host_desc: *const ze_host_mem_alloc_desc_t,
        size: usize,
        alignment: usize,
        pptr: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemFree(hContext: ze_context_handle_t, ptr: *mut ::core::ffi::c_void) -> ze_result_t;
}
impl _ze_memory_type_t {
    pub const ZE_MEMORY_TYPE_UNKNOWN: _ze_memory_type_t = _ze_memory_type_t(0);
}
impl _ze_memory_type_t {
    pub const ZE_MEMORY_TYPE_HOST: _ze_memory_type_t = _ze_memory_type_t(1);
}
impl _ze_memory_type_t {
    pub const ZE_MEMORY_TYPE_DEVICE: _ze_memory_type_t = _ze_memory_type_t(2);
}
impl _ze_memory_type_t {
    pub const ZE_MEMORY_TYPE_SHARED: _ze_memory_type_t = _ze_memory_type_t(3);
}
impl _ze_memory_type_t {
    pub const ZE_MEMORY_TYPE_FORCE_UINT32: _ze_memory_type_t = _ze_memory_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_type_t as ze_memory_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_allocation_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub type_: ze_memory_type_t,
    pub id: u64,
    pub pageSize: u64,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemGetAllocProperties(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        pMemAllocProperties: *mut ze_memory_allocation_properties_t,
        phDevice: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemGetAddressRange(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        pBase: *mut *mut ::core::ffi::c_void,
        pSize: *mut usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemGetIpcHandle(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        pIpcHandle: *mut ze_ipc_mem_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemGetIpcHandleFromFileDescriptorExp(
        hContext: ze_context_handle_t,
        handle: u64,
        pIpcHandle: *mut ze_ipc_mem_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemGetFileDescriptorFromIpcHandleExp(
        hContext: ze_context_handle_t,
        ipcHandle: ze_ipc_mem_handle_t,
        pHandle: *mut u64,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemPutIpcHandle(
        hContext: ze_context_handle_t,
        handle: ze_ipc_mem_handle_t,
    ) -> ze_result_t;
}
pub type ze_ipc_memory_flags_t = u32;
impl _ze_ipc_memory_flag_t {
    pub const ZE_IPC_MEMORY_FLAG_BIAS_CACHED: _ze_ipc_memory_flag_t = _ze_ipc_memory_flag_t(1);
}
impl _ze_ipc_memory_flag_t {
    pub const ZE_IPC_MEMORY_FLAG_BIAS_UNCACHED: _ze_ipc_memory_flag_t = _ze_ipc_memory_flag_t(2);
}
impl _ze_ipc_memory_flag_t {
    pub const ZE_IPC_MEMORY_FLAG_FORCE_UINT32: _ze_ipc_memory_flag_t =
        _ze_ipc_memory_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_ipc_memory_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_ipc_memory_flag_t as ze_ipc_memory_flag_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeMemOpenIpcHandle(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        handle: ze_ipc_mem_handle_t,
        flags: ze_ipc_memory_flags_t,
        pptr: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemCloseIpcHandle(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_memory_export_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_external_memory_type_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_memory_import_fd_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub fd: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_memory_export_fd_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub fd: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_memory_import_win32_handle_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_memory_export_win32_handle_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_external_memory_type_flags_t,
    pub handle: *mut ::core::ffi::c_void,
}
pub type ze_memory_atomic_attr_exp_flags_t = u32;
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_NO_ATOMICS: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(1);
}
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_NO_HOST_ATOMICS: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(2);
}
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_HOST_ATOMICS: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(4);
}
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_NO_DEVICE_ATOMICS: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(8);
}
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_DEVICE_ATOMICS: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(16);
}
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_NO_SYSTEM_ATOMICS: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(32);
}
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_SYSTEM_ATOMICS: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(64);
}
impl _ze_memory_atomic_attr_exp_flag_t {
    pub const ZE_MEMORY_ATOMIC_ATTR_EXP_FLAG_FORCE_UINT32: _ze_memory_atomic_attr_exp_flag_t =
        _ze_memory_atomic_attr_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_atomic_attr_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_atomic_attr_exp_flag_t as ze_memory_atomic_attr_exp_flag_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeMemSetAtomicAccessAttributeExp(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
        attr: ze_memory_atomic_attr_exp_flags_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemGetAtomicAccessAttributeExp(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
        pAttr: *mut ze_memory_atomic_attr_exp_flags_t,
    ) -> ze_result_t;
}
impl _ze_module_format_t {
    pub const ZE_MODULE_FORMAT_IL_SPIRV: _ze_module_format_t = _ze_module_format_t(0);
}
impl _ze_module_format_t {
    pub const ZE_MODULE_FORMAT_NATIVE: _ze_module_format_t = _ze_module_format_t(1);
}
impl _ze_module_format_t {
    pub const ZE_MODULE_FORMAT_FORCE_UINT32: _ze_module_format_t = _ze_module_format_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_format_t(pub ::core::ffi::c_uint);
pub use self::_ze_module_format_t as ze_module_format_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_constants_t {
    pub numConstants: u32,
    pub pConstantIds: *const u32,
    pub pConstantValues: *mut *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub format: ze_module_format_t,
    pub inputSize: usize,
    pub pInputModule: *const u8,
    pub pBuildFlags: *const ::core::ffi::c_char,
    pub pConstants: *const ze_module_constants_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_module_desc_t,
        phModule: *mut ze_module_handle_t,
        phBuildLog: *mut ze_module_build_log_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleDestroy(hModule: ze_module_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleDynamicLink(
        numModules: u32,
        phModules: *mut ze_module_handle_t,
        phLinkLog: *mut ze_module_build_log_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleBuildLogDestroy(hModuleBuildLog: ze_module_build_log_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleBuildLogGetString(
        hModuleBuildLog: ze_module_build_log_handle_t,
        pSize: *mut usize,
        pBuildLog: *mut ::core::ffi::c_char,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleGetNativeBinary(
        hModule: ze_module_handle_t,
        pSize: *mut usize,
        pModuleNativeBinary: *mut u8,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleGetGlobalPointer(
        hModule: ze_module_handle_t,
        pGlobalName: *const ::core::ffi::c_char,
        pSize: *mut usize,
        pptr: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleGetKernelNames(
        hModule: ze_module_handle_t,
        pCount: *mut u32,
        pNames: *mut *const ::core::ffi::c_char,
    ) -> ze_result_t;
}
pub type ze_module_property_flags_t = u32;
impl _ze_module_property_flag_t {
    pub const ZE_MODULE_PROPERTY_FLAG_IMPORTS: _ze_module_property_flag_t =
        _ze_module_property_flag_t(1);
}
impl _ze_module_property_flag_t {
    pub const ZE_MODULE_PROPERTY_FLAG_FORCE_UINT32: _ze_module_property_flag_t =
        _ze_module_property_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_property_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_module_property_flag_t as ze_module_property_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_module_property_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleGetProperties(
        hModule: ze_module_handle_t,
        pModuleProperties: *mut ze_module_properties_t,
    ) -> ze_result_t;
}
pub type ze_kernel_flags_t = u32;
impl _ze_kernel_flag_t {
    pub const ZE_KERNEL_FLAG_FORCE_RESIDENCY: _ze_kernel_flag_t = _ze_kernel_flag_t(1);
}
impl _ze_kernel_flag_t {
    pub const ZE_KERNEL_FLAG_EXPLICIT_RESIDENCY: _ze_kernel_flag_t = _ze_kernel_flag_t(2);
}
impl _ze_kernel_flag_t {
    pub const ZE_KERNEL_FLAG_FORCE_UINT32: _ze_kernel_flag_t = _ze_kernel_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_kernel_flag_t as ze_kernel_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_kernel_flags_t,
    pub pKernelName: *const ::core::ffi::c_char,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelCreate(
        hModule: ze_module_handle_t,
        desc: *const ze_kernel_desc_t,
        phKernel: *mut ze_kernel_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelDestroy(hKernel: ze_kernel_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleGetFunctionPointer(
        hModule: ze_module_handle_t,
        pFunctionName: *const ::core::ffi::c_char,
        pfnFunction: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSetGroupSize(
        hKernel: ze_kernel_handle_t,
        groupSizeX: u32,
        groupSizeY: u32,
        groupSizeZ: u32,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSuggestGroupSize(
        hKernel: ze_kernel_handle_t,
        globalSizeX: u32,
        globalSizeY: u32,
        globalSizeZ: u32,
        groupSizeX: *mut u32,
        groupSizeY: *mut u32,
        groupSizeZ: *mut u32,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSuggestMaxCooperativeGroupCount(
        hKernel: ze_kernel_handle_t,
        totalGroupCount: *mut u32,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSetArgumentValue(
        hKernel: ze_kernel_handle_t,
        argIndex: u32,
        argSize: usize,
        pArgValue: *const ::core::ffi::c_void,
    ) -> ze_result_t;
}
pub type ze_kernel_indirect_access_flags_t = u32;
impl _ze_kernel_indirect_access_flag_t {
    pub const ZE_KERNEL_INDIRECT_ACCESS_FLAG_HOST: _ze_kernel_indirect_access_flag_t =
        _ze_kernel_indirect_access_flag_t(1);
}
impl _ze_kernel_indirect_access_flag_t {
    pub const ZE_KERNEL_INDIRECT_ACCESS_FLAG_DEVICE: _ze_kernel_indirect_access_flag_t =
        _ze_kernel_indirect_access_flag_t(2);
}
impl _ze_kernel_indirect_access_flag_t {
    pub const ZE_KERNEL_INDIRECT_ACCESS_FLAG_SHARED: _ze_kernel_indirect_access_flag_t =
        _ze_kernel_indirect_access_flag_t(4);
}
impl _ze_kernel_indirect_access_flag_t {
    pub const ZE_KERNEL_INDIRECT_ACCESS_FLAG_FORCE_UINT32: _ze_kernel_indirect_access_flag_t =
        _ze_kernel_indirect_access_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_indirect_access_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_kernel_indirect_access_flag_t as ze_kernel_indirect_access_flag_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSetIndirectAccess(
        hKernel: ze_kernel_handle_t,
        flags: ze_kernel_indirect_access_flags_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelGetIndirectAccess(
        hKernel: ze_kernel_handle_t,
        pFlags: *mut ze_kernel_indirect_access_flags_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelGetSourceAttributes(
        hKernel: ze_kernel_handle_t,
        pSize: *mut u32,
        pString: *mut *mut ::core::ffi::c_char,
    ) -> ze_result_t;
}
pub type ze_cache_config_flags_t = u32;
impl _ze_cache_config_flag_t {
    pub const ZE_CACHE_CONFIG_FLAG_LARGE_SLM: _ze_cache_config_flag_t = _ze_cache_config_flag_t(1);
}
impl _ze_cache_config_flag_t {
    pub const ZE_CACHE_CONFIG_FLAG_LARGE_DATA: _ze_cache_config_flag_t = _ze_cache_config_flag_t(2);
}
impl _ze_cache_config_flag_t {
    pub const ZE_CACHE_CONFIG_FLAG_FORCE_UINT32: _ze_cache_config_flag_t =
        _ze_cache_config_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_cache_config_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_cache_config_flag_t as ze_cache_config_flag_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSetCacheConfig(
        hKernel: ze_kernel_handle_t,
        flags: ze_cache_config_flags_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_uuid_t {
    pub kid: [u8; 16usize],
    pub mid: [u8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub numKernelArgs: u32,
    pub requiredGroupSizeX: u32,
    pub requiredGroupSizeY: u32,
    pub requiredGroupSizeZ: u32,
    pub requiredNumSubGroups: u32,
    pub requiredSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxNumSubgroups: u32,
    pub localMemSize: u32,
    pub privateMemSize: u32,
    pub spillMemSize: u32,
    pub uuid: ze_kernel_uuid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_preferred_group_size_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub preferredMultiple: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelGetProperties(
        hKernel: ze_kernel_handle_t,
        pKernelProperties: *mut ze_kernel_properties_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelGetName(
        hKernel: ze_kernel_handle_t,
        pSize: *mut usize,
        pName: *mut ::core::ffi::c_char,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_group_count_t {
    pub groupCountX: u32,
    pub groupCountY: u32,
    pub groupCountZ: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendLaunchKernel(
        hCommandList: ze_command_list_handle_t,
        hKernel: ze_kernel_handle_t,
        pLaunchFuncArgs: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendLaunchCooperativeKernel(
        hCommandList: ze_command_list_handle_t,
        hKernel: ze_kernel_handle_t,
        pLaunchFuncArgs: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendLaunchKernelIndirect(
        hCommandList: ze_command_list_handle_t,
        hKernel: ze_kernel_handle_t,
        pLaunchArgumentsBuffer: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendLaunchMultipleKernelsIndirect(
        hCommandList: ze_command_list_handle_t,
        numKernels: u32,
        phKernels: *mut ze_kernel_handle_t,
        pCountBuffer: *const u32,
        pLaunchArgumentsBuffer: *const ze_group_count_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
impl _ze_module_program_exp_version_t {
    pub const ZE_MODULE_PROGRAM_EXP_VERSION_1_0: _ze_module_program_exp_version_t =
        _ze_module_program_exp_version_t(65536);
}
impl _ze_module_program_exp_version_t {
    pub const ZE_MODULE_PROGRAM_EXP_VERSION_CURRENT: _ze_module_program_exp_version_t =
        _ze_module_program_exp_version_t(65536);
}
impl _ze_module_program_exp_version_t {
    pub const ZE_MODULE_PROGRAM_EXP_VERSION_FORCE_UINT32: _ze_module_program_exp_version_t =
        _ze_module_program_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_program_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_module_program_exp_version_t as ze_module_program_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_program_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub count: u32,
    pub inputSizes: *const usize,
    pub pInputModules: *mut *const u8,
    pub pBuildFlags: *mut *const ::core::ffi::c_char,
    pub pConstants: *mut *const ze_module_constants_t,
}
impl _ze_raytracing_ext_version_t {
    pub const ZE_RAYTRACING_EXT_VERSION_1_0: _ze_raytracing_ext_version_t =
        _ze_raytracing_ext_version_t(65536);
}
impl _ze_raytracing_ext_version_t {
    pub const ZE_RAYTRACING_EXT_VERSION_CURRENT: _ze_raytracing_ext_version_t =
        _ze_raytracing_ext_version_t(65536);
}
impl _ze_raytracing_ext_version_t {
    pub const ZE_RAYTRACING_EXT_VERSION_FORCE_UINT32: _ze_raytracing_ext_version_t =
        _ze_raytracing_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_raytracing_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_raytracing_ext_version_t as ze_raytracing_ext_version_t;
pub type ze_device_raytracing_ext_flags_t = u32;
impl _ze_device_raytracing_ext_flag_t {
    pub const ZE_DEVICE_RAYTRACING_EXT_FLAG_RAYQUERY: _ze_device_raytracing_ext_flag_t =
        _ze_device_raytracing_ext_flag_t(1);
}
impl _ze_device_raytracing_ext_flag_t {
    pub const ZE_DEVICE_RAYTRACING_EXT_FLAG_FORCE_UINT32: _ze_device_raytracing_ext_flag_t =
        _ze_device_raytracing_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_raytracing_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_raytracing_ext_flag_t as ze_device_raytracing_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_raytracing_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_device_raytracing_ext_flags_t,
    pub maxBVHLevels: u32,
}
pub type ze_raytracing_mem_alloc_ext_flags_t = u32;
impl _ze_raytracing_mem_alloc_ext_flag_t {
    pub const ZE_RAYTRACING_MEM_ALLOC_EXT_FLAG_TBD: _ze_raytracing_mem_alloc_ext_flag_t =
        _ze_raytracing_mem_alloc_ext_flag_t(1);
}
impl _ze_raytracing_mem_alloc_ext_flag_t {
    pub const ZE_RAYTRACING_MEM_ALLOC_EXT_FLAG_FORCE_UINT32: _ze_raytracing_mem_alloc_ext_flag_t =
        _ze_raytracing_mem_alloc_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_raytracing_mem_alloc_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_raytracing_mem_alloc_ext_flag_t as ze_raytracing_mem_alloc_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_raytracing_mem_alloc_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_raytracing_mem_alloc_ext_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextMakeMemoryResident(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *mut ::core::ffi::c_void,
        size: usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextEvictMemory(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        ptr: *mut ::core::ffi::c_void,
        size: usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextMakeImageResident(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        hImage: ze_image_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeContextEvictImage(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        hImage: ze_image_handle_t,
    ) -> ze_result_t;
}
impl _ze_sampler_address_mode_t {
    pub const ZE_SAMPLER_ADDRESS_MODE_NONE: _ze_sampler_address_mode_t =
        _ze_sampler_address_mode_t(0);
}
impl _ze_sampler_address_mode_t {
    pub const ZE_SAMPLER_ADDRESS_MODE_REPEAT: _ze_sampler_address_mode_t =
        _ze_sampler_address_mode_t(1);
}
impl _ze_sampler_address_mode_t {
    pub const ZE_SAMPLER_ADDRESS_MODE_CLAMP: _ze_sampler_address_mode_t =
        _ze_sampler_address_mode_t(2);
}
impl _ze_sampler_address_mode_t {
    pub const ZE_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: _ze_sampler_address_mode_t =
        _ze_sampler_address_mode_t(3);
}
impl _ze_sampler_address_mode_t {
    pub const ZE_SAMPLER_ADDRESS_MODE_MIRROR: _ze_sampler_address_mode_t =
        _ze_sampler_address_mode_t(4);
}
impl _ze_sampler_address_mode_t {
    pub const ZE_SAMPLER_ADDRESS_MODE_FORCE_UINT32: _ze_sampler_address_mode_t =
        _ze_sampler_address_mode_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sampler_address_mode_t(pub ::core::ffi::c_uint);
pub use self::_ze_sampler_address_mode_t as ze_sampler_address_mode_t;
impl _ze_sampler_filter_mode_t {
    pub const ZE_SAMPLER_FILTER_MODE_NEAREST: _ze_sampler_filter_mode_t =
        _ze_sampler_filter_mode_t(0);
}
impl _ze_sampler_filter_mode_t {
    pub const ZE_SAMPLER_FILTER_MODE_LINEAR: _ze_sampler_filter_mode_t =
        _ze_sampler_filter_mode_t(1);
}
impl _ze_sampler_filter_mode_t {
    pub const ZE_SAMPLER_FILTER_MODE_FORCE_UINT32: _ze_sampler_filter_mode_t =
        _ze_sampler_filter_mode_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sampler_filter_mode_t(pub ::core::ffi::c_uint);
pub use self::_ze_sampler_filter_mode_t as ze_sampler_filter_mode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sampler_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub addressMode: ze_sampler_address_mode_t,
    pub filterMode: ze_sampler_filter_mode_t,
    pub isNormalized: ze_bool_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeSamplerCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_sampler_desc_t,
        phSampler: *mut ze_sampler_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeSamplerDestroy(hSampler: ze_sampler_handle_t) -> ze_result_t;
}
impl _ze_memory_access_attribute_t {
    pub const ZE_MEMORY_ACCESS_ATTRIBUTE_NONE: _ze_memory_access_attribute_t =
        _ze_memory_access_attribute_t(0);
}
impl _ze_memory_access_attribute_t {
    pub const ZE_MEMORY_ACCESS_ATTRIBUTE_READWRITE: _ze_memory_access_attribute_t =
        _ze_memory_access_attribute_t(1);
}
impl _ze_memory_access_attribute_t {
    pub const ZE_MEMORY_ACCESS_ATTRIBUTE_READONLY: _ze_memory_access_attribute_t =
        _ze_memory_access_attribute_t(2);
}
impl _ze_memory_access_attribute_t {
    pub const ZE_MEMORY_ACCESS_ATTRIBUTE_FORCE_UINT32: _ze_memory_access_attribute_t =
        _ze_memory_access_attribute_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_access_attribute_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_access_attribute_t as ze_memory_access_attribute_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeVirtualMemReserve(
        hContext: ze_context_handle_t,
        pStart: *const ::core::ffi::c_void,
        size: usize,
        pptr: *mut *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeVirtualMemFree(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeVirtualMemQueryPageSize(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        size: usize,
        pagesize: *mut usize,
    ) -> ze_result_t;
}
pub type ze_physical_mem_flags_t = u32;
impl _ze_physical_mem_flag_t {
    pub const ZE_PHYSICAL_MEM_FLAG_ALLOCATE_ON_DEVICE: _ze_physical_mem_flag_t =
        _ze_physical_mem_flag_t(1);
}
impl _ze_physical_mem_flag_t {
    pub const ZE_PHYSICAL_MEM_FLAG_ALLOCATE_ON_HOST: _ze_physical_mem_flag_t =
        _ze_physical_mem_flag_t(2);
}
impl _ze_physical_mem_flag_t {
    pub const ZE_PHYSICAL_MEM_FLAG_FORCE_UINT32: _ze_physical_mem_flag_t =
        _ze_physical_mem_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_physical_mem_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_physical_mem_flag_t as ze_physical_mem_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_physical_mem_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_physical_mem_flags_t,
    pub size: usize,
}
unsafe extern "C" {
    #[must_use]
    pub fn zePhysicalMemCreate(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *mut ze_physical_mem_desc_t,
        phPhysicalMemory: *mut ze_physical_mem_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zePhysicalMemDestroy(
        hContext: ze_context_handle_t,
        hPhysicalMemory: ze_physical_mem_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeVirtualMemMap(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
        hPhysicalMemory: ze_physical_mem_handle_t,
        offset: usize,
        access: ze_memory_access_attribute_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeVirtualMemUnmap(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeVirtualMemSetAccessAttribute(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
        access: ze_memory_access_attribute_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeVirtualMemGetAccessAttribute(
        hContext: ze_context_handle_t,
        ptr: *const ::core::ffi::c_void,
        size: usize,
        access: *mut ze_memory_access_attribute_t,
        outSize: *mut usize,
    ) -> ze_result_t;
}
impl _ze_float_atomics_ext_version_t {
    pub const ZE_FLOAT_ATOMICS_EXT_VERSION_1_0: _ze_float_atomics_ext_version_t =
        _ze_float_atomics_ext_version_t(65536);
}
impl _ze_float_atomics_ext_version_t {
    pub const ZE_FLOAT_ATOMICS_EXT_VERSION_CURRENT: _ze_float_atomics_ext_version_t =
        _ze_float_atomics_ext_version_t(65536);
}
impl _ze_float_atomics_ext_version_t {
    pub const ZE_FLOAT_ATOMICS_EXT_VERSION_FORCE_UINT32: _ze_float_atomics_ext_version_t =
        _ze_float_atomics_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_float_atomics_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_float_atomics_ext_version_t as ze_float_atomics_ext_version_t;
pub type ze_device_fp_atomic_ext_flags_t = u32;
impl _ze_device_fp_atomic_ext_flag_t {
    pub const ZE_DEVICE_FP_ATOMIC_EXT_FLAG_GLOBAL_LOAD_STORE: _ze_device_fp_atomic_ext_flag_t =
        _ze_device_fp_atomic_ext_flag_t(1);
}
impl _ze_device_fp_atomic_ext_flag_t {
    pub const ZE_DEVICE_FP_ATOMIC_EXT_FLAG_GLOBAL_ADD: _ze_device_fp_atomic_ext_flag_t =
        _ze_device_fp_atomic_ext_flag_t(2);
}
impl _ze_device_fp_atomic_ext_flag_t {
    pub const ZE_DEVICE_FP_ATOMIC_EXT_FLAG_GLOBAL_MIN_MAX: _ze_device_fp_atomic_ext_flag_t =
        _ze_device_fp_atomic_ext_flag_t(4);
}
impl _ze_device_fp_atomic_ext_flag_t {
    pub const ZE_DEVICE_FP_ATOMIC_EXT_FLAG_LOCAL_LOAD_STORE: _ze_device_fp_atomic_ext_flag_t =
        _ze_device_fp_atomic_ext_flag_t(65536);
}
impl _ze_device_fp_atomic_ext_flag_t {
    pub const ZE_DEVICE_FP_ATOMIC_EXT_FLAG_LOCAL_ADD: _ze_device_fp_atomic_ext_flag_t =
        _ze_device_fp_atomic_ext_flag_t(131072);
}
impl _ze_device_fp_atomic_ext_flag_t {
    pub const ZE_DEVICE_FP_ATOMIC_EXT_FLAG_LOCAL_MIN_MAX: _ze_device_fp_atomic_ext_flag_t =
        _ze_device_fp_atomic_ext_flag_t(262144);
}
impl _ze_device_fp_atomic_ext_flag_t {
    pub const ZE_DEVICE_FP_ATOMIC_EXT_FLAG_FORCE_UINT32: _ze_device_fp_atomic_ext_flag_t =
        _ze_device_fp_atomic_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_fp_atomic_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_fp_atomic_ext_flag_t as ze_device_fp_atomic_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_float_atomic_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub fp16Flags: ze_device_fp_atomic_ext_flags_t,
    pub fp32Flags: ze_device_fp_atomic_ext_flags_t,
    pub fp64Flags: ze_device_fp_atomic_ext_flags_t,
}
impl _ze_global_offset_exp_version_t {
    pub const ZE_GLOBAL_OFFSET_EXP_VERSION_1_0: _ze_global_offset_exp_version_t =
        _ze_global_offset_exp_version_t(65536);
}
impl _ze_global_offset_exp_version_t {
    pub const ZE_GLOBAL_OFFSET_EXP_VERSION_CURRENT: _ze_global_offset_exp_version_t =
        _ze_global_offset_exp_version_t(65536);
}
impl _ze_global_offset_exp_version_t {
    pub const ZE_GLOBAL_OFFSET_EXP_VERSION_FORCE_UINT32: _ze_global_offset_exp_version_t =
        _ze_global_offset_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_global_offset_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_global_offset_exp_version_t as ze_global_offset_exp_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSetGlobalOffsetExp(
        hKernel: ze_kernel_handle_t,
        offsetX: u32,
        offsetY: u32,
        offsetZ: u32,
    ) -> ze_result_t;
}
impl _ze_relaxed_allocation_limits_exp_version_t {
    pub const ZE_RELAXED_ALLOCATION_LIMITS_EXP_VERSION_1_0:
        _ze_relaxed_allocation_limits_exp_version_t =
        _ze_relaxed_allocation_limits_exp_version_t(65536);
}
impl _ze_relaxed_allocation_limits_exp_version_t {
    pub const ZE_RELAXED_ALLOCATION_LIMITS_EXP_VERSION_CURRENT:
        _ze_relaxed_allocation_limits_exp_version_t =
        _ze_relaxed_allocation_limits_exp_version_t(65536);
}
impl _ze_relaxed_allocation_limits_exp_version_t {
    pub const ZE_RELAXED_ALLOCATION_LIMITS_EXP_VERSION_FORCE_UINT32:
        _ze_relaxed_allocation_limits_exp_version_t =
        _ze_relaxed_allocation_limits_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_relaxed_allocation_limits_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_relaxed_allocation_limits_exp_version_t as ze_relaxed_allocation_limits_exp_version_t;
pub type ze_relaxed_allocation_limits_exp_flags_t = u32;
impl _ze_relaxed_allocation_limits_exp_flag_t {
    pub const ZE_RELAXED_ALLOCATION_LIMITS_EXP_FLAG_MAX_SIZE:
        _ze_relaxed_allocation_limits_exp_flag_t = _ze_relaxed_allocation_limits_exp_flag_t(1);
}
impl _ze_relaxed_allocation_limits_exp_flag_t {
    pub const ZE_RELAXED_ALLOCATION_LIMITS_EXP_FLAG_FORCE_UINT32:
        _ze_relaxed_allocation_limits_exp_flag_t =
        _ze_relaxed_allocation_limits_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_relaxed_allocation_limits_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_relaxed_allocation_limits_exp_flag_t as ze_relaxed_allocation_limits_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_relaxed_allocation_limits_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_relaxed_allocation_limits_exp_flags_t,
}
impl _ze_kernel_get_binary_exp_version_t {
    pub const ZE_KERNEL_GET_BINARY_EXP_VERSION_1_0: _ze_kernel_get_binary_exp_version_t =
        _ze_kernel_get_binary_exp_version_t(65536);
}
impl _ze_kernel_get_binary_exp_version_t {
    pub const ZE_KERNEL_GET_BINARY_EXP_VERSION_CURRENT: _ze_kernel_get_binary_exp_version_t =
        _ze_kernel_get_binary_exp_version_t(65536);
}
impl _ze_kernel_get_binary_exp_version_t {
    pub const ZE_KERNEL_GET_BINARY_EXP_VERSION_FORCE_UINT32: _ze_kernel_get_binary_exp_version_t =
        _ze_kernel_get_binary_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_get_binary_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_kernel_get_binary_exp_version_t as ze_kernel_get_binary_exp_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelGetBinaryExp(
        hKernel: ze_kernel_handle_t,
        pSize: *mut usize,
        pKernelBinary: *mut u8,
    ) -> ze_result_t;
}
impl _ze_driver_ddi_handles_ext_version_t {
    pub const ZE_DRIVER_DDI_HANDLES_EXT_VERSION_1_0: _ze_driver_ddi_handles_ext_version_t =
        _ze_driver_ddi_handles_ext_version_t(65536);
}
impl _ze_driver_ddi_handles_ext_version_t {
    pub const ZE_DRIVER_DDI_HANDLES_EXT_VERSION_CURRENT: _ze_driver_ddi_handles_ext_version_t =
        _ze_driver_ddi_handles_ext_version_t(65536);
}
impl _ze_driver_ddi_handles_ext_version_t {
    pub const ZE_DRIVER_DDI_HANDLES_EXT_VERSION_FORCE_UINT32: _ze_driver_ddi_handles_ext_version_t =
        _ze_driver_ddi_handles_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_ddi_handles_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_driver_ddi_handles_ext_version_t as ze_driver_ddi_handles_ext_version_t;
pub type ze_driver_ddi_handle_ext_flags_t = u32;
impl _ze_driver_ddi_handle_ext_flag_t {
    pub const ZE_DRIVER_DDI_HANDLE_EXT_FLAG_DDI_HANDLE_EXT_SUPPORTED:
        _ze_driver_ddi_handle_ext_flag_t = _ze_driver_ddi_handle_ext_flag_t(1);
}
impl _ze_driver_ddi_handle_ext_flag_t {
    pub const ZE_DRIVER_DDI_HANDLE_EXT_FLAG_FORCE_UINT32: _ze_driver_ddi_handle_ext_flag_t =
        _ze_driver_ddi_handle_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_ddi_handle_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_driver_ddi_handle_ext_flag_t as ze_driver_ddi_handle_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_ddi_handles_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_driver_ddi_handle_ext_flags_t,
}
impl _ze_external_semaphore_ext_version_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_VERSION_1_0: _ze_external_semaphore_ext_version_t =
        _ze_external_semaphore_ext_version_t(65536);
}
impl _ze_external_semaphore_ext_version_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_VERSION_CURRENT: _ze_external_semaphore_ext_version_t =
        _ze_external_semaphore_ext_version_t(65536);
}
impl _ze_external_semaphore_ext_version_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_VERSION_FORCE_UINT32: _ze_external_semaphore_ext_version_t =
        _ze_external_semaphore_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_semaphore_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_external_semaphore_ext_version_t as ze_external_semaphore_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_external_semaphore_ext_handle_t {
    _unused: [u8; 0],
}
pub type ze_external_semaphore_ext_handle_t = *mut _ze_external_semaphore_ext_handle_t;
pub type ze_external_semaphore_ext_flags_t = u32;
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_OPAQUE_FD: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(1);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_OPAQUE_WIN32: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(2);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_OPAQUE_WIN32_KMT: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(4);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_D3D12_FENCE: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(8);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_D3D11_FENCE: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(16);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_KEYED_MUTEX: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(32);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_KEYED_MUTEX_KMT: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(64);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_VK_TIMELINE_SEMAPHORE_FD:
        _ze_external_semaphore_ext_flag_t = _ze_external_semaphore_ext_flag_t(128);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_VK_TIMELINE_SEMAPHORE_WIN32:
        _ze_external_semaphore_ext_flag_t = _ze_external_semaphore_ext_flag_t(256);
}
impl _ze_external_semaphore_ext_flag_t {
    pub const ZE_EXTERNAL_SEMAPHORE_EXT_FLAG_FORCE_UINT32: _ze_external_semaphore_ext_flag_t =
        _ze_external_semaphore_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_semaphore_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_external_semaphore_ext_flag_t as ze_external_semaphore_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_semaphore_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_external_semaphore_ext_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_semaphore_win32_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub handle: *mut ::core::ffi::c_void,
    pub name: *const ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_semaphore_fd_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub fd: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_semaphore_signal_params_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub value: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_external_semaphore_wait_params_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub value: u64,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceImportExternalSemaphoreExt(
        hDevice: ze_device_handle_t,
        desc: *const ze_external_semaphore_ext_desc_t,
        phSemaphore: *mut ze_external_semaphore_ext_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceReleaseExternalSemaphoreExt(
        hSemaphore: ze_external_semaphore_ext_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendSignalExternalSemaphoreExt(
        hCommandList: ze_command_list_handle_t,
        numSemaphores: u32,
        phSemaphores: *mut ze_external_semaphore_ext_handle_t,
        signalParams: *mut ze_external_semaphore_signal_params_ext_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendWaitExternalSemaphoreExt(
        hCommandList: ze_command_list_handle_t,
        numSemaphores: u32,
        phSemaphores: *mut ze_external_semaphore_ext_handle_t,
        waitParams: *mut ze_external_semaphore_wait_params_ext_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
impl _ze_cache_reservation_ext_version_t {
    pub const ZE_CACHE_RESERVATION_EXT_VERSION_1_0: _ze_cache_reservation_ext_version_t =
        _ze_cache_reservation_ext_version_t(65536);
}
impl _ze_cache_reservation_ext_version_t {
    pub const ZE_CACHE_RESERVATION_EXT_VERSION_CURRENT: _ze_cache_reservation_ext_version_t =
        _ze_cache_reservation_ext_version_t(65536);
}
impl _ze_cache_reservation_ext_version_t {
    pub const ZE_CACHE_RESERVATION_EXT_VERSION_FORCE_UINT32: _ze_cache_reservation_ext_version_t =
        _ze_cache_reservation_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_cache_reservation_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_cache_reservation_ext_version_t as ze_cache_reservation_ext_version_t;
impl _ze_cache_ext_region_t {
    pub const ZE_CACHE_EXT_REGION_ZE_CACHE_REGION_DEFAULT: _ze_cache_ext_region_t =
        _ze_cache_ext_region_t(0);
}
impl _ze_cache_ext_region_t {
    pub const ZE_CACHE_EXT_REGION_ZE_CACHE_RESERVE_REGION: _ze_cache_ext_region_t =
        _ze_cache_ext_region_t(1);
}
impl _ze_cache_ext_region_t {
    pub const ZE_CACHE_EXT_REGION_ZE_CACHE_NON_RESERVED_REGION: _ze_cache_ext_region_t =
        _ze_cache_ext_region_t(2);
}
impl _ze_cache_ext_region_t {
    pub const ZE_CACHE_EXT_REGION_DEFAULT: _ze_cache_ext_region_t = _ze_cache_ext_region_t(0);
}
impl _ze_cache_ext_region_t {
    pub const ZE_CACHE_EXT_REGION_RESERVED: _ze_cache_ext_region_t = _ze_cache_ext_region_t(1);
}
impl _ze_cache_ext_region_t {
    pub const ZE_CACHE_EXT_REGION_NON_RESERVED: _ze_cache_ext_region_t = _ze_cache_ext_region_t(2);
}
impl _ze_cache_ext_region_t {
    pub const ZE_CACHE_EXT_REGION_FORCE_UINT32: _ze_cache_ext_region_t =
        _ze_cache_ext_region_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_cache_ext_region_t(pub ::core::ffi::c_uint);
pub use self::_ze_cache_ext_region_t as ze_cache_ext_region_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_cache_reservation_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub maxCacheReservationSize: usize,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceReserveCacheExt(
        hDevice: ze_device_handle_t,
        cacheLevel: usize,
        cacheReservationSize: usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceSetCacheAdviceExt(
        hDevice: ze_device_handle_t,
        ptr: *mut ::core::ffi::c_void,
        regionSize: usize,
        cacheRegion: ze_cache_ext_region_t,
    ) -> ze_result_t;
}
impl _ze_event_query_timestamps_exp_version_t {
    pub const ZE_EVENT_QUERY_TIMESTAMPS_EXP_VERSION_1_0: _ze_event_query_timestamps_exp_version_t =
        _ze_event_query_timestamps_exp_version_t(65536);
}
impl _ze_event_query_timestamps_exp_version_t {
    pub const ZE_EVENT_QUERY_TIMESTAMPS_EXP_VERSION_CURRENT:
        _ze_event_query_timestamps_exp_version_t = _ze_event_query_timestamps_exp_version_t(65536);
}
impl _ze_event_query_timestamps_exp_version_t {
    pub const ZE_EVENT_QUERY_TIMESTAMPS_EXP_VERSION_FORCE_UINT32:
        _ze_event_query_timestamps_exp_version_t =
        _ze_event_query_timestamps_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_query_timestamps_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_event_query_timestamps_exp_version_t as ze_event_query_timestamps_exp_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeEventQueryTimestampsExp(
        hEvent: ze_event_handle_t,
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pTimestamps: *mut ze_kernel_timestamp_result_t,
    ) -> ze_result_t;
}
impl _ze_image_memory_properties_exp_version_t {
    pub const ZE_IMAGE_MEMORY_PROPERTIES_EXP_VERSION_1_0:
        _ze_image_memory_properties_exp_version_t =
        _ze_image_memory_properties_exp_version_t(65536);
}
impl _ze_image_memory_properties_exp_version_t {
    pub const ZE_IMAGE_MEMORY_PROPERTIES_EXP_VERSION_CURRENT:
        _ze_image_memory_properties_exp_version_t =
        _ze_image_memory_properties_exp_version_t(65536);
}
impl _ze_image_memory_properties_exp_version_t {
    pub const ZE_IMAGE_MEMORY_PROPERTIES_EXP_VERSION_FORCE_UINT32:
        _ze_image_memory_properties_exp_version_t =
        _ze_image_memory_properties_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_memory_properties_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_memory_properties_exp_version_t as ze_image_memory_properties_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_memory_properties_exp_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub size: u64,
    pub rowPitch: u64,
    pub slicePitch: u64,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeImageGetMemoryPropertiesExp(
        hImage: ze_image_handle_t,
        pMemoryProperties: *mut ze_image_memory_properties_exp_t,
    ) -> ze_result_t;
}
impl _ze_image_view_ext_version_t {
    pub const ZE_IMAGE_VIEW_EXT_VERSION_1_0: _ze_image_view_ext_version_t =
        _ze_image_view_ext_version_t(65536);
}
impl _ze_image_view_ext_version_t {
    pub const ZE_IMAGE_VIEW_EXT_VERSION_CURRENT: _ze_image_view_ext_version_t =
        _ze_image_view_ext_version_t(65536);
}
impl _ze_image_view_ext_version_t {
    pub const ZE_IMAGE_VIEW_EXT_VERSION_FORCE_UINT32: _ze_image_view_ext_version_t =
        _ze_image_view_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_view_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_view_ext_version_t as ze_image_view_ext_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeImageViewCreateExt(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        hImage: ze_image_handle_t,
        phImageView: *mut ze_image_handle_t,
    ) -> ze_result_t;
}
impl _ze_image_view_exp_version_t {
    pub const ZE_IMAGE_VIEW_EXP_VERSION_1_0: _ze_image_view_exp_version_t =
        _ze_image_view_exp_version_t(65536);
}
impl _ze_image_view_exp_version_t {
    pub const ZE_IMAGE_VIEW_EXP_VERSION_CURRENT: _ze_image_view_exp_version_t =
        _ze_image_view_exp_version_t(65536);
}
impl _ze_image_view_exp_version_t {
    pub const ZE_IMAGE_VIEW_EXP_VERSION_FORCE_UINT32: _ze_image_view_exp_version_t =
        _ze_image_view_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_view_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_view_exp_version_t as ze_image_view_exp_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeImageViewCreateExp(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        desc: *const ze_image_desc_t,
        hImage: ze_image_handle_t,
        phImageView: *mut ze_image_handle_t,
    ) -> ze_result_t;
}
impl _ze_image_view_planar_ext_version_t {
    pub const ZE_IMAGE_VIEW_PLANAR_EXT_VERSION_1_0: _ze_image_view_planar_ext_version_t =
        _ze_image_view_planar_ext_version_t(65536);
}
impl _ze_image_view_planar_ext_version_t {
    pub const ZE_IMAGE_VIEW_PLANAR_EXT_VERSION_CURRENT: _ze_image_view_planar_ext_version_t =
        _ze_image_view_planar_ext_version_t(65536);
}
impl _ze_image_view_planar_ext_version_t {
    pub const ZE_IMAGE_VIEW_PLANAR_EXT_VERSION_FORCE_UINT32: _ze_image_view_planar_ext_version_t =
        _ze_image_view_planar_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_view_planar_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_view_planar_ext_version_t as ze_image_view_planar_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_view_planar_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub planeIndex: u32,
}
impl _ze_image_view_planar_exp_version_t {
    pub const ZE_IMAGE_VIEW_PLANAR_EXP_VERSION_1_0: _ze_image_view_planar_exp_version_t =
        _ze_image_view_planar_exp_version_t(65536);
}
impl _ze_image_view_planar_exp_version_t {
    pub const ZE_IMAGE_VIEW_PLANAR_EXP_VERSION_CURRENT: _ze_image_view_planar_exp_version_t =
        _ze_image_view_planar_exp_version_t(65536);
}
impl _ze_image_view_planar_exp_version_t {
    pub const ZE_IMAGE_VIEW_PLANAR_EXP_VERSION_FORCE_UINT32: _ze_image_view_planar_exp_version_t =
        _ze_image_view_planar_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_view_planar_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_view_planar_exp_version_t as ze_image_view_planar_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_view_planar_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub planeIndex: u32,
}
impl _ze_scheduling_hints_exp_version_t {
    pub const ZE_SCHEDULING_HINTS_EXP_VERSION_1_0: _ze_scheduling_hints_exp_version_t =
        _ze_scheduling_hints_exp_version_t(65536);
}
impl _ze_scheduling_hints_exp_version_t {
    pub const ZE_SCHEDULING_HINTS_EXP_VERSION_CURRENT: _ze_scheduling_hints_exp_version_t =
        _ze_scheduling_hints_exp_version_t(65536);
}
impl _ze_scheduling_hints_exp_version_t {
    pub const ZE_SCHEDULING_HINTS_EXP_VERSION_FORCE_UINT32: _ze_scheduling_hints_exp_version_t =
        _ze_scheduling_hints_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_scheduling_hints_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_scheduling_hints_exp_version_t as ze_scheduling_hints_exp_version_t;
pub type ze_scheduling_hint_exp_flags_t = u32;
impl _ze_scheduling_hint_exp_flag_t {
    pub const ZE_SCHEDULING_HINT_EXP_FLAG_OLDEST_FIRST: _ze_scheduling_hint_exp_flag_t =
        _ze_scheduling_hint_exp_flag_t(1);
}
impl _ze_scheduling_hint_exp_flag_t {
    pub const ZE_SCHEDULING_HINT_EXP_FLAG_ROUND_ROBIN: _ze_scheduling_hint_exp_flag_t =
        _ze_scheduling_hint_exp_flag_t(2);
}
impl _ze_scheduling_hint_exp_flag_t {
    pub const ZE_SCHEDULING_HINT_EXP_FLAG_STALL_BASED_ROUND_ROBIN: _ze_scheduling_hint_exp_flag_t =
        _ze_scheduling_hint_exp_flag_t(4);
}
impl _ze_scheduling_hint_exp_flag_t {
    pub const ZE_SCHEDULING_HINT_EXP_FLAG_FORCE_UINT32: _ze_scheduling_hint_exp_flag_t =
        _ze_scheduling_hint_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_scheduling_hint_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_scheduling_hint_exp_flag_t as ze_scheduling_hint_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_scheduling_hint_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub schedulingHintFlags: ze_scheduling_hint_exp_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_scheduling_hint_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_scheduling_hint_exp_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeKernelSchedulingHintExp(
        hKernel: ze_kernel_handle_t,
        pHint: *mut ze_scheduling_hint_exp_desc_t,
    ) -> ze_result_t;
}
impl _ze_linkonce_odr_ext_version_t {
    pub const ZE_LINKONCE_ODR_EXT_VERSION_1_0: _ze_linkonce_odr_ext_version_t =
        _ze_linkonce_odr_ext_version_t(65536);
}
impl _ze_linkonce_odr_ext_version_t {
    pub const ZE_LINKONCE_ODR_EXT_VERSION_CURRENT: _ze_linkonce_odr_ext_version_t =
        _ze_linkonce_odr_ext_version_t(65536);
}
impl _ze_linkonce_odr_ext_version_t {
    pub const ZE_LINKONCE_ODR_EXT_VERSION_FORCE_UINT32: _ze_linkonce_odr_ext_version_t =
        _ze_linkonce_odr_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_linkonce_odr_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_linkonce_odr_ext_version_t as ze_linkonce_odr_ext_version_t;
impl _ze_power_saving_hint_exp_version_t {
    pub const ZE_POWER_SAVING_HINT_EXP_VERSION_1_0: _ze_power_saving_hint_exp_version_t =
        _ze_power_saving_hint_exp_version_t(65536);
}
impl _ze_power_saving_hint_exp_version_t {
    pub const ZE_POWER_SAVING_HINT_EXP_VERSION_CURRENT: _ze_power_saving_hint_exp_version_t =
        _ze_power_saving_hint_exp_version_t(65536);
}
impl _ze_power_saving_hint_exp_version_t {
    pub const ZE_POWER_SAVING_HINT_EXP_VERSION_FORCE_UINT32: _ze_power_saving_hint_exp_version_t =
        _ze_power_saving_hint_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_power_saving_hint_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_power_saving_hint_exp_version_t as ze_power_saving_hint_exp_version_t;
impl _ze_power_saving_hint_type_t {
    pub const ZE_POWER_SAVING_HINT_TYPE_MIN: _ze_power_saving_hint_type_t =
        _ze_power_saving_hint_type_t(0);
}
impl _ze_power_saving_hint_type_t {
    pub const ZE_POWER_SAVING_HINT_TYPE_MAX: _ze_power_saving_hint_type_t =
        _ze_power_saving_hint_type_t(100);
}
impl _ze_power_saving_hint_type_t {
    pub const ZE_POWER_SAVING_HINT_TYPE_FORCE_UINT32: _ze_power_saving_hint_type_t =
        _ze_power_saving_hint_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_power_saving_hint_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_power_saving_hint_type_t as ze_power_saving_hint_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_power_saving_hint_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub hint: u32,
}
impl _ze_subgroup_ext_version_t {
    pub const ZE_SUBGROUP_EXT_VERSION_1_0: _ze_subgroup_ext_version_t =
        _ze_subgroup_ext_version_t(65536);
}
impl _ze_subgroup_ext_version_t {
    pub const ZE_SUBGROUP_EXT_VERSION_CURRENT: _ze_subgroup_ext_version_t =
        _ze_subgroup_ext_version_t(65536);
}
impl _ze_subgroup_ext_version_t {
    pub const ZE_SUBGROUP_EXT_VERSION_FORCE_UINT32: _ze_subgroup_ext_version_t =
        _ze_subgroup_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_subgroup_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_subgroup_ext_version_t as ze_subgroup_ext_version_t;
impl _ze_eu_count_ext_version_t {
    pub const ZE_EU_COUNT_EXT_VERSION_1_0: _ze_eu_count_ext_version_t =
        _ze_eu_count_ext_version_t(65536);
}
impl _ze_eu_count_ext_version_t {
    pub const ZE_EU_COUNT_EXT_VERSION_CURRENT: _ze_eu_count_ext_version_t =
        _ze_eu_count_ext_version_t(65536);
}
impl _ze_eu_count_ext_version_t {
    pub const ZE_EU_COUNT_EXT_VERSION_FORCE_UINT32: _ze_eu_count_ext_version_t =
        _ze_eu_count_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_eu_count_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_eu_count_ext_version_t as ze_eu_count_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_eu_count_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub numTotalEUs: u32,
}
impl _ze_pci_properties_ext_version_t {
    pub const ZE_PCI_PROPERTIES_EXT_VERSION_1_0: _ze_pci_properties_ext_version_t =
        _ze_pci_properties_ext_version_t(65536);
}
impl _ze_pci_properties_ext_version_t {
    pub const ZE_PCI_PROPERTIES_EXT_VERSION_CURRENT: _ze_pci_properties_ext_version_t =
        _ze_pci_properties_ext_version_t(65536);
}
impl _ze_pci_properties_ext_version_t {
    pub const ZE_PCI_PROPERTIES_EXT_VERSION_FORCE_UINT32: _ze_pci_properties_ext_version_t =
        _ze_pci_properties_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_pci_properties_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_pci_properties_ext_version_t as ze_pci_properties_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_pci_address_ext_t {
    pub domain: u32,
    pub bus: u32,
    pub device: u32,
    pub function: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_pci_speed_ext_t {
    pub genVersion: i32,
    pub width: i32,
    pub maxBandwidth: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_pci_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub address: ze_pci_address_ext_t,
    pub maxSpeed: ze_pci_speed_ext_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDevicePciGetPropertiesExt(
        hDevice: ze_device_handle_t,
        pPciProperties: *mut ze_pci_ext_properties_t,
    ) -> ze_result_t;
}
impl _ze_srgb_ext_version_t {
    pub const ZE_SRGB_EXT_VERSION_1_0: _ze_srgb_ext_version_t = _ze_srgb_ext_version_t(65536);
}
impl _ze_srgb_ext_version_t {
    pub const ZE_SRGB_EXT_VERSION_CURRENT: _ze_srgb_ext_version_t = _ze_srgb_ext_version_t(65536);
}
impl _ze_srgb_ext_version_t {
    pub const ZE_SRGB_EXT_VERSION_FORCE_UINT32: _ze_srgb_ext_version_t =
        _ze_srgb_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_srgb_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_srgb_ext_version_t as ze_srgb_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_srgb_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub sRGB: ze_bool_t,
}
impl _ze_image_copy_ext_version_t {
    pub const ZE_IMAGE_COPY_EXT_VERSION_1_0: _ze_image_copy_ext_version_t =
        _ze_image_copy_ext_version_t(65536);
}
impl _ze_image_copy_ext_version_t {
    pub const ZE_IMAGE_COPY_EXT_VERSION_CURRENT: _ze_image_copy_ext_version_t =
        _ze_image_copy_ext_version_t(65536);
}
impl _ze_image_copy_ext_version_t {
    pub const ZE_IMAGE_COPY_EXT_VERSION_FORCE_UINT32: _ze_image_copy_ext_version_t =
        _ze_image_copy_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_copy_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_copy_ext_version_t as ze_image_copy_ext_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendImageCopyToMemoryExt(
        hCommandList: ze_command_list_handle_t,
        dstptr: *mut ::core::ffi::c_void,
        hSrcImage: ze_image_handle_t,
        pSrcRegion: *const ze_image_region_t,
        destRowPitch: u32,
        destSlicePitch: u32,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListAppendImageCopyFromMemoryExt(
        hCommandList: ze_command_list_handle_t,
        hDstImage: ze_image_handle_t,
        srcptr: *const ::core::ffi::c_void,
        pDstRegion: *const ze_image_region_t,
        srcRowPitch: u32,
        srcSlicePitch: u32,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
impl _ze_image_query_alloc_properties_ext_version_t {
    pub const ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_VERSION_1_0:
        _ze_image_query_alloc_properties_ext_version_t =
        _ze_image_query_alloc_properties_ext_version_t(65536);
}
impl _ze_image_query_alloc_properties_ext_version_t {
    pub const ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_VERSION_CURRENT:
        _ze_image_query_alloc_properties_ext_version_t =
        _ze_image_query_alloc_properties_ext_version_t(65536);
}
impl _ze_image_query_alloc_properties_ext_version_t {
    pub const ZE_IMAGE_QUERY_ALLOC_PROPERTIES_EXT_VERSION_FORCE_UINT32:
        _ze_image_query_alloc_properties_ext_version_t =
        _ze_image_query_alloc_properties_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_query_alloc_properties_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_query_alloc_properties_ext_version_t as ze_image_query_alloc_properties_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_allocation_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub id: u64,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeImageGetAllocPropertiesExt(
        hContext: ze_context_handle_t,
        hImage: ze_image_handle_t,
        pImageAllocProperties: *mut ze_image_allocation_ext_properties_t,
    ) -> ze_result_t;
}
impl _ze_linkage_inspection_ext_version_t {
    pub const ZE_LINKAGE_INSPECTION_EXT_VERSION_1_0: _ze_linkage_inspection_ext_version_t =
        _ze_linkage_inspection_ext_version_t(65536);
}
impl _ze_linkage_inspection_ext_version_t {
    pub const ZE_LINKAGE_INSPECTION_EXT_VERSION_CURRENT: _ze_linkage_inspection_ext_version_t =
        _ze_linkage_inspection_ext_version_t(65536);
}
impl _ze_linkage_inspection_ext_version_t {
    pub const ZE_LINKAGE_INSPECTION_EXT_VERSION_FORCE_UINT32: _ze_linkage_inspection_ext_version_t =
        _ze_linkage_inspection_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_linkage_inspection_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_linkage_inspection_ext_version_t as ze_linkage_inspection_ext_version_t;
pub type ze_linkage_inspection_ext_flags_t = u32;
impl _ze_linkage_inspection_ext_flag_t {
    pub const ZE_LINKAGE_INSPECTION_EXT_FLAG_IMPORTS: _ze_linkage_inspection_ext_flag_t =
        _ze_linkage_inspection_ext_flag_t(1);
}
impl _ze_linkage_inspection_ext_flag_t {
    pub const ZE_LINKAGE_INSPECTION_EXT_FLAG_UNRESOLVABLE_IMPORTS:
        _ze_linkage_inspection_ext_flag_t = _ze_linkage_inspection_ext_flag_t(2);
}
impl _ze_linkage_inspection_ext_flag_t {
    pub const ZE_LINKAGE_INSPECTION_EXT_FLAG_EXPORTS: _ze_linkage_inspection_ext_flag_t =
        _ze_linkage_inspection_ext_flag_t(4);
}
impl _ze_linkage_inspection_ext_flag_t {
    pub const ZE_LINKAGE_INSPECTION_EXT_FLAG_FORCE_UINT32: _ze_linkage_inspection_ext_flag_t =
        _ze_linkage_inspection_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_linkage_inspection_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_linkage_inspection_ext_flag_t as ze_linkage_inspection_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_linkage_inspection_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_linkage_inspection_ext_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeModuleInspectLinkageExt(
        pInspectDesc: *mut ze_linkage_inspection_ext_desc_t,
        numModules: u32,
        phModules: *mut ze_module_handle_t,
        phLog: *mut ze_module_build_log_handle_t,
    ) -> ze_result_t;
}
impl _ze_memory_compression_hints_ext_version_t {
    pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_VERSION_1_0:
        _ze_memory_compression_hints_ext_version_t =
        _ze_memory_compression_hints_ext_version_t(65536);
}
impl _ze_memory_compression_hints_ext_version_t {
    pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_VERSION_CURRENT:
        _ze_memory_compression_hints_ext_version_t =
        _ze_memory_compression_hints_ext_version_t(65536);
}
impl _ze_memory_compression_hints_ext_version_t {
    pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_VERSION_FORCE_UINT32:
        _ze_memory_compression_hints_ext_version_t =
        _ze_memory_compression_hints_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_compression_hints_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_compression_hints_ext_version_t as ze_memory_compression_hints_ext_version_t;
pub type ze_memory_compression_hints_ext_flags_t = u32;
impl _ze_memory_compression_hints_ext_flag_t {
    pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_FLAG_COMPRESSED:
        _ze_memory_compression_hints_ext_flag_t = _ze_memory_compression_hints_ext_flag_t(1);
}
impl _ze_memory_compression_hints_ext_flag_t {
    pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_FLAG_UNCOMPRESSED:
        _ze_memory_compression_hints_ext_flag_t = _ze_memory_compression_hints_ext_flag_t(2);
}
impl _ze_memory_compression_hints_ext_flag_t {
    pub const ZE_MEMORY_COMPRESSION_HINTS_EXT_FLAG_FORCE_UINT32:
        _ze_memory_compression_hints_ext_flag_t =
        _ze_memory_compression_hints_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_compression_hints_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_compression_hints_ext_flag_t as ze_memory_compression_hints_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_compression_hints_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_memory_compression_hints_ext_flags_t,
}
impl _ze_memory_free_policies_ext_version_t {
    pub const ZE_MEMORY_FREE_POLICIES_EXT_VERSION_1_0: _ze_memory_free_policies_ext_version_t =
        _ze_memory_free_policies_ext_version_t(65536);
}
impl _ze_memory_free_policies_ext_version_t {
    pub const ZE_MEMORY_FREE_POLICIES_EXT_VERSION_CURRENT: _ze_memory_free_policies_ext_version_t =
        _ze_memory_free_policies_ext_version_t(65536);
}
impl _ze_memory_free_policies_ext_version_t {
    pub const ZE_MEMORY_FREE_POLICIES_EXT_VERSION_FORCE_UINT32:
        _ze_memory_free_policies_ext_version_t = _ze_memory_free_policies_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_free_policies_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_memory_free_policies_ext_version_t as ze_memory_free_policies_ext_version_t;
pub type ze_driver_memory_free_policy_ext_flags_t = u32;
impl _ze_driver_memory_free_policy_ext_flag_t {
    pub const ZE_DRIVER_MEMORY_FREE_POLICY_EXT_FLAG_BLOCKING_FREE:
        _ze_driver_memory_free_policy_ext_flag_t = _ze_driver_memory_free_policy_ext_flag_t(1);
}
impl _ze_driver_memory_free_policy_ext_flag_t {
    pub const ZE_DRIVER_MEMORY_FREE_POLICY_EXT_FLAG_DEFER_FREE:
        _ze_driver_memory_free_policy_ext_flag_t = _ze_driver_memory_free_policy_ext_flag_t(2);
}
impl _ze_driver_memory_free_policy_ext_flag_t {
    pub const ZE_DRIVER_MEMORY_FREE_POLICY_EXT_FLAG_FORCE_UINT32:
        _ze_driver_memory_free_policy_ext_flag_t =
        _ze_driver_memory_free_policy_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_memory_free_policy_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_driver_memory_free_policy_ext_flag_t as ze_driver_memory_free_policy_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_memory_free_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub freePolicies: ze_driver_memory_free_policy_ext_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_free_ext_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub freePolicy: ze_driver_memory_free_policy_ext_flags_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemFreeExt(
        hContext: ze_context_handle_t,
        pMemFreeDesc: *const ze_memory_free_ext_desc_t,
        ptr: *mut ::core::ffi::c_void,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_p2p_bandwidth_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub logicalBandwidth: u32,
    pub physicalBandwidth: u32,
    pub bandwidthUnit: ze_bandwidth_unit_t,
    pub logicalLatency: u32,
    pub physicalLatency: u32,
    pub latencyUnit: ze_latency_unit_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_copy_bandwidth_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub copyBandwidth: u32,
    pub copyBandwidthUnit: ze_bandwidth_unit_t,
}
impl _ze_device_luid_ext_version_t {
    pub const ZE_DEVICE_LUID_EXT_VERSION_1_0: _ze_device_luid_ext_version_t =
        _ze_device_luid_ext_version_t(65536);
}
impl _ze_device_luid_ext_version_t {
    pub const ZE_DEVICE_LUID_EXT_VERSION_CURRENT: _ze_device_luid_ext_version_t =
        _ze_device_luid_ext_version_t(65536);
}
impl _ze_device_luid_ext_version_t {
    pub const ZE_DEVICE_LUID_EXT_VERSION_FORCE_UINT32: _ze_device_luid_ext_version_t =
        _ze_device_luid_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_luid_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_luid_ext_version_t as ze_device_luid_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_luid_ext_t {
    pub id: [u8; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_luid_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub luid: ze_device_luid_ext_t,
    pub nodeMask: u32,
}
impl _ze_fabric_vertex_exp_type_t {
    pub const ZE_FABRIC_VERTEX_EXP_TYPE_UNKNOWN: _ze_fabric_vertex_exp_type_t =
        _ze_fabric_vertex_exp_type_t(0);
}
impl _ze_fabric_vertex_exp_type_t {
    pub const ZE_FABRIC_VERTEX_EXP_TYPE_DEVICE: _ze_fabric_vertex_exp_type_t =
        _ze_fabric_vertex_exp_type_t(1);
}
impl _ze_fabric_vertex_exp_type_t {
    pub const ZE_FABRIC_VERTEX_EXP_TYPE_SUBDEVICE: _ze_fabric_vertex_exp_type_t =
        _ze_fabric_vertex_exp_type_t(2);
}
impl _ze_fabric_vertex_exp_type_t {
    pub const ZE_FABRIC_VERTEX_EXP_TYPE_SWITCH: _ze_fabric_vertex_exp_type_t =
        _ze_fabric_vertex_exp_type_t(3);
}
impl _ze_fabric_vertex_exp_type_t {
    pub const ZE_FABRIC_VERTEX_EXP_TYPE_FORCE_UINT32: _ze_fabric_vertex_exp_type_t =
        _ze_fabric_vertex_exp_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fabric_vertex_exp_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_fabric_vertex_exp_type_t as ze_fabric_vertex_exp_type_t;
impl _ze_fabric_edge_exp_duplexity_t {
    pub const ZE_FABRIC_EDGE_EXP_DUPLEXITY_UNKNOWN: _ze_fabric_edge_exp_duplexity_t =
        _ze_fabric_edge_exp_duplexity_t(0);
}
impl _ze_fabric_edge_exp_duplexity_t {
    pub const ZE_FABRIC_EDGE_EXP_DUPLEXITY_HALF_DUPLEX: _ze_fabric_edge_exp_duplexity_t =
        _ze_fabric_edge_exp_duplexity_t(1);
}
impl _ze_fabric_edge_exp_duplexity_t {
    pub const ZE_FABRIC_EDGE_EXP_DUPLEXITY_FULL_DUPLEX: _ze_fabric_edge_exp_duplexity_t =
        _ze_fabric_edge_exp_duplexity_t(2);
}
impl _ze_fabric_edge_exp_duplexity_t {
    pub const ZE_FABRIC_EDGE_EXP_DUPLEXITY_FORCE_UINT32: _ze_fabric_edge_exp_duplexity_t =
        _ze_fabric_edge_exp_duplexity_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fabric_edge_exp_duplexity_t(pub ::core::ffi::c_uint);
pub use self::_ze_fabric_edge_exp_duplexity_t as ze_fabric_edge_exp_duplexity_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fabric_vertex_pci_exp_address_t {
    pub domain: u32,
    pub bus: u32,
    pub device: u32,
    pub function: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fabric_vertex_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub uuid: ze_uuid_t,
    pub type_: ze_fabric_vertex_exp_type_t,
    pub remote: ze_bool_t,
    pub address: ze_fabric_vertex_pci_exp_address_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fabric_edge_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub uuid: ze_uuid_t,
    pub model: [::core::ffi::c_char; 256usize],
    pub bandwidth: u32,
    pub bandwidthUnit: ze_bandwidth_unit_t,
    pub latency: u32,
    pub latencyUnit: ze_latency_unit_t,
    pub duplexity: ze_fabric_edge_exp_duplexity_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFabricVertexGetExp(
        hDriver: ze_driver_handle_t,
        pCount: *mut u32,
        phVertices: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFabricVertexGetSubVerticesExp(
        hVertex: ze_fabric_vertex_handle_t,
        pCount: *mut u32,
        phSubvertices: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFabricVertexGetPropertiesExp(
        hVertex: ze_fabric_vertex_handle_t,
        pVertexProperties: *mut ze_fabric_vertex_exp_properties_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFabricVertexGetDeviceExp(
        hVertex: ze_fabric_vertex_handle_t,
        phDevice: *mut ze_device_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDeviceGetFabricVertexExp(
        hDevice: ze_device_handle_t,
        phVertex: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFabricEdgeGetExp(
        hVertexA: ze_fabric_vertex_handle_t,
        hVertexB: ze_fabric_vertex_handle_t,
        pCount: *mut u32,
        phEdges: *mut ze_fabric_edge_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFabricEdgeGetVerticesExp(
        hEdge: ze_fabric_edge_handle_t,
        phVertexA: *mut ze_fabric_vertex_handle_t,
        phVertexB: *mut ze_fabric_vertex_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeFabricEdgeGetPropertiesExp(
        hEdge: ze_fabric_edge_handle_t,
        pEdgeProperties: *mut ze_fabric_edge_exp_properties_t,
    ) -> ze_result_t;
}
impl _ze_device_memory_properties_ext_version_t {
    pub const ZE_DEVICE_MEMORY_PROPERTIES_EXT_VERSION_1_0:
        _ze_device_memory_properties_ext_version_t =
        _ze_device_memory_properties_ext_version_t(65536);
}
impl _ze_device_memory_properties_ext_version_t {
    pub const ZE_DEVICE_MEMORY_PROPERTIES_EXT_VERSION_CURRENT:
        _ze_device_memory_properties_ext_version_t =
        _ze_device_memory_properties_ext_version_t(65536);
}
impl _ze_device_memory_properties_ext_version_t {
    pub const ZE_DEVICE_MEMORY_PROPERTIES_EXT_VERSION_FORCE_UINT32:
        _ze_device_memory_properties_ext_version_t =
        _ze_device_memory_properties_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_memory_properties_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_memory_properties_ext_version_t as ze_device_memory_properties_ext_version_t;
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_HBM: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(0);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_HBM2: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(1);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_DDR: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(2);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_DDR2: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(3);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_DDR3: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(4);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_DDR4: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(5);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_DDR5: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(6);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(7);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR3: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(8);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR4: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(9);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_LPDDR5: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(10);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_SRAM: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(11);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_L1: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(12);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_L3: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(13);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_GRF: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(14);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_SLM: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(15);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_GDDR4: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(16);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_GDDR5: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(17);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_GDDR5X: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(18);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_GDDR6: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(19);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_GDDR6X: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(20);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_GDDR7: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(21);
}
impl _ze_device_memory_ext_type_t {
    pub const ZE_DEVICE_MEMORY_EXT_TYPE_FORCE_UINT32: _ze_device_memory_ext_type_t =
        _ze_device_memory_ext_type_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_memory_ext_type_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_memory_ext_type_t as ze_device_memory_ext_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_memory_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub type_: ze_device_memory_ext_type_t,
    pub physicalSize: u64,
    pub readBandwidth: u32,
    pub writeBandwidth: u32,
    pub bandwidthUnit: ze_bandwidth_unit_t,
}
impl _ze_bfloat16_conversions_ext_version_t {
    pub const ZE_BFLOAT16_CONVERSIONS_EXT_VERSION_1_0: _ze_bfloat16_conversions_ext_version_t =
        _ze_bfloat16_conversions_ext_version_t(65536);
}
impl _ze_bfloat16_conversions_ext_version_t {
    pub const ZE_BFLOAT16_CONVERSIONS_EXT_VERSION_CURRENT: _ze_bfloat16_conversions_ext_version_t =
        _ze_bfloat16_conversions_ext_version_t(65536);
}
impl _ze_bfloat16_conversions_ext_version_t {
    pub const ZE_BFLOAT16_CONVERSIONS_EXT_VERSION_FORCE_UINT32:
        _ze_bfloat16_conversions_ext_version_t = _ze_bfloat16_conversions_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_bfloat16_conversions_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_bfloat16_conversions_ext_version_t as ze_bfloat16_conversions_ext_version_t;
impl _ze_device_ip_version_version_t {
    pub const ZE_DEVICE_IP_VERSION_VERSION_1_0: _ze_device_ip_version_version_t =
        _ze_device_ip_version_version_t(65536);
}
impl _ze_device_ip_version_version_t {
    pub const ZE_DEVICE_IP_VERSION_VERSION_CURRENT: _ze_device_ip_version_version_t =
        _ze_device_ip_version_version_t(65536);
}
impl _ze_device_ip_version_version_t {
    pub const ZE_DEVICE_IP_VERSION_VERSION_FORCE_UINT32: _ze_device_ip_version_version_t =
        _ze_device_ip_version_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_ip_version_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_device_ip_version_version_t as ze_device_ip_version_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_ip_version_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub ipVersion: u32,
}
impl _ze_kernel_max_group_size_properties_ext_version_t {
    pub const ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_VERSION_1_0:
        _ze_kernel_max_group_size_properties_ext_version_t =
        _ze_kernel_max_group_size_properties_ext_version_t(65536);
}
impl _ze_kernel_max_group_size_properties_ext_version_t {
    pub const ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_VERSION_CURRENT:
        _ze_kernel_max_group_size_properties_ext_version_t =
        _ze_kernel_max_group_size_properties_ext_version_t(65536);
}
impl _ze_kernel_max_group_size_properties_ext_version_t {
    pub const ZE_KERNEL_MAX_GROUP_SIZE_PROPERTIES_EXT_VERSION_FORCE_UINT32:
        _ze_kernel_max_group_size_properties_ext_version_t =
        _ze_kernel_max_group_size_properties_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_max_group_size_properties_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_kernel_max_group_size_properties_ext_version_t as ze_kernel_max_group_size_properties_ext_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_max_group_size_properties_ext_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxGroupSize: u32,
}
pub type ze_kernel_max_group_size_ext_properties_t = ze_kernel_max_group_size_properties_ext_t;
impl _ze_sub_allocations_exp_version_t {
    pub const ZE_SUB_ALLOCATIONS_EXP_VERSION_1_0: _ze_sub_allocations_exp_version_t =
        _ze_sub_allocations_exp_version_t(65536);
}
impl _ze_sub_allocations_exp_version_t {
    pub const ZE_SUB_ALLOCATIONS_EXP_VERSION_CURRENT: _ze_sub_allocations_exp_version_t =
        _ze_sub_allocations_exp_version_t(65536);
}
impl _ze_sub_allocations_exp_version_t {
    pub const ZE_SUB_ALLOCATIONS_EXP_VERSION_FORCE_UINT32: _ze_sub_allocations_exp_version_t =
        _ze_sub_allocations_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sub_allocations_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_sub_allocations_exp_version_t as ze_sub_allocations_exp_version_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sub_allocation_t {
    pub base: *mut ::core::ffi::c_void,
    pub size: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_memory_sub_allocations_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub pCount: *mut u32,
    pub pSubAllocations: *mut ze_sub_allocation_t,
}
impl _ze_event_query_kernel_timestamps_ext_version_t {
    pub const ZE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_VERSION_1_0:
        _ze_event_query_kernel_timestamps_ext_version_t =
        _ze_event_query_kernel_timestamps_ext_version_t(65536);
}
impl _ze_event_query_kernel_timestamps_ext_version_t {
    pub const ZE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_VERSION_CURRENT:
        _ze_event_query_kernel_timestamps_ext_version_t =
        _ze_event_query_kernel_timestamps_ext_version_t(65536);
}
impl _ze_event_query_kernel_timestamps_ext_version_t {
    pub const ZE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_VERSION_FORCE_UINT32:
        _ze_event_query_kernel_timestamps_ext_version_t =
        _ze_event_query_kernel_timestamps_ext_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_query_kernel_timestamps_ext_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_event_query_kernel_timestamps_ext_version_t as ze_event_query_kernel_timestamps_ext_version_t;
pub type ze_event_query_kernel_timestamps_ext_flags_t = u32;
impl _ze_event_query_kernel_timestamps_ext_flag_t {
    pub const ZE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_FLAG_KERNEL:
        _ze_event_query_kernel_timestamps_ext_flag_t =
        _ze_event_query_kernel_timestamps_ext_flag_t(1);
}
impl _ze_event_query_kernel_timestamps_ext_flag_t {
    pub const ZE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_FLAG_SYNCHRONIZED:
        _ze_event_query_kernel_timestamps_ext_flag_t =
        _ze_event_query_kernel_timestamps_ext_flag_t(2);
}
impl _ze_event_query_kernel_timestamps_ext_flag_t {
    pub const ZE_EVENT_QUERY_KERNEL_TIMESTAMPS_EXT_FLAG_FORCE_UINT32:
        _ze_event_query_kernel_timestamps_ext_flag_t =
        _ze_event_query_kernel_timestamps_ext_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_query_kernel_timestamps_ext_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_event_query_kernel_timestamps_ext_flag_t as ze_event_query_kernel_timestamps_ext_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_query_kernel_timestamps_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_event_query_kernel_timestamps_ext_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_synchronized_timestamp_data_ext_t {
    pub kernelStart: u64,
    pub kernelEnd: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_synchronized_timestamp_result_ext_t {
    pub global: ze_synchronized_timestamp_data_ext_t,
    pub context: ze_synchronized_timestamp_data_ext_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_query_kernel_timestamps_results_ext_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub pKernelTimestampsBuffer: *mut ze_kernel_timestamp_result_t,
    pub pSynchronizedTimestampsBuffer: *mut ze_synchronized_timestamp_result_ext_t,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeEventQueryKernelTimestampsExt(
        hEvent: ze_event_handle_t,
        hDevice: ze_device_handle_t,
        pCount: *mut u32,
        pResults: *mut ze_event_query_kernel_timestamps_results_ext_properties_t,
    ) -> ze_result_t;
}
impl _ze_rtas_builder_exp_version_t {
    pub const ZE_RTAS_BUILDER_EXP_VERSION_1_0: _ze_rtas_builder_exp_version_t =
        _ze_rtas_builder_exp_version_t(65536);
}
impl _ze_rtas_builder_exp_version_t {
    pub const ZE_RTAS_BUILDER_EXP_VERSION_CURRENT: _ze_rtas_builder_exp_version_t =
        _ze_rtas_builder_exp_version_t(65536);
}
impl _ze_rtas_builder_exp_version_t {
    pub const ZE_RTAS_BUILDER_EXP_VERSION_FORCE_UINT32: _ze_rtas_builder_exp_version_t =
        _ze_rtas_builder_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_exp_version_t as ze_rtas_builder_exp_version_t;
pub type ze_rtas_device_exp_flags_t = u32;
impl _ze_rtas_device_exp_flag_t {
    pub const ZE_RTAS_DEVICE_EXP_FLAG_RESERVED: _ze_rtas_device_exp_flag_t =
        _ze_rtas_device_exp_flag_t(1);
}
impl _ze_rtas_device_exp_flag_t {
    pub const ZE_RTAS_DEVICE_EXP_FLAG_FORCE_UINT32: _ze_rtas_device_exp_flag_t =
        _ze_rtas_device_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_device_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_device_exp_flag_t as ze_rtas_device_exp_flag_t;
impl _ze_rtas_format_exp_t {
    pub const ZE_RTAS_FORMAT_EXP_INVALID: _ze_rtas_format_exp_t = _ze_rtas_format_exp_t(0);
}
impl _ze_rtas_format_exp_t {
    pub const ZE_RTAS_FORMAT_EXP_FORCE_UINT32: _ze_rtas_format_exp_t =
        _ze_rtas_format_exp_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_format_exp_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_format_exp_t as ze_rtas_format_exp_t;
pub type ze_rtas_builder_exp_flags_t = u32;
impl _ze_rtas_builder_exp_flag_t {
    pub const ZE_RTAS_BUILDER_EXP_FLAG_RESERVED: _ze_rtas_builder_exp_flag_t =
        _ze_rtas_builder_exp_flag_t(1);
}
impl _ze_rtas_builder_exp_flag_t {
    pub const ZE_RTAS_BUILDER_EXP_FLAG_FORCE_UINT32: _ze_rtas_builder_exp_flag_t =
        _ze_rtas_builder_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_exp_flag_t as ze_rtas_builder_exp_flag_t;
pub type ze_rtas_parallel_operation_exp_flags_t = u32;
impl _ze_rtas_parallel_operation_exp_flag_t {
    pub const ZE_RTAS_PARALLEL_OPERATION_EXP_FLAG_RESERVED: _ze_rtas_parallel_operation_exp_flag_t =
        _ze_rtas_parallel_operation_exp_flag_t(1);
}
impl _ze_rtas_parallel_operation_exp_flag_t {
    pub const ZE_RTAS_PARALLEL_OPERATION_EXP_FLAG_FORCE_UINT32:
        _ze_rtas_parallel_operation_exp_flag_t = _ze_rtas_parallel_operation_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_parallel_operation_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_parallel_operation_exp_flag_t as ze_rtas_parallel_operation_exp_flag_t;
pub type ze_rtas_builder_geometry_exp_flags_t = u32;
impl _ze_rtas_builder_geometry_exp_flag_t {
    pub const ZE_RTAS_BUILDER_GEOMETRY_EXP_FLAG_NON_OPAQUE: _ze_rtas_builder_geometry_exp_flag_t =
        _ze_rtas_builder_geometry_exp_flag_t(1);
}
impl _ze_rtas_builder_geometry_exp_flag_t {
    pub const ZE_RTAS_BUILDER_GEOMETRY_EXP_FLAG_FORCE_UINT32: _ze_rtas_builder_geometry_exp_flag_t =
        _ze_rtas_builder_geometry_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_geometry_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_geometry_exp_flag_t as ze_rtas_builder_geometry_exp_flag_t;
pub type ze_rtas_builder_packed_geometry_exp_flags_t = u8;
pub type ze_rtas_builder_instance_exp_flags_t = u32;
impl _ze_rtas_builder_instance_exp_flag_t {
    pub const ZE_RTAS_BUILDER_INSTANCE_EXP_FLAG_TRIANGLE_CULL_DISABLE:
        _ze_rtas_builder_instance_exp_flag_t = _ze_rtas_builder_instance_exp_flag_t(1);
}
impl _ze_rtas_builder_instance_exp_flag_t {
    pub const ZE_RTAS_BUILDER_INSTANCE_EXP_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE:
        _ze_rtas_builder_instance_exp_flag_t = _ze_rtas_builder_instance_exp_flag_t(2);
}
impl _ze_rtas_builder_instance_exp_flag_t {
    pub const ZE_RTAS_BUILDER_INSTANCE_EXP_FLAG_TRIANGLE_FORCE_OPAQUE:
        _ze_rtas_builder_instance_exp_flag_t = _ze_rtas_builder_instance_exp_flag_t(4);
}
impl _ze_rtas_builder_instance_exp_flag_t {
    pub const ZE_RTAS_BUILDER_INSTANCE_EXP_FLAG_TRIANGLE_FORCE_NON_OPAQUE:
        _ze_rtas_builder_instance_exp_flag_t = _ze_rtas_builder_instance_exp_flag_t(8);
}
impl _ze_rtas_builder_instance_exp_flag_t {
    pub const ZE_RTAS_BUILDER_INSTANCE_EXP_FLAG_FORCE_UINT32: _ze_rtas_builder_instance_exp_flag_t =
        _ze_rtas_builder_instance_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_instance_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_instance_exp_flag_t as ze_rtas_builder_instance_exp_flag_t;
pub type ze_rtas_builder_packed_instance_exp_flags_t = u8;
pub type ze_rtas_builder_build_op_exp_flags_t = u32;
impl _ze_rtas_builder_build_op_exp_flag_t {
    pub const ZE_RTAS_BUILDER_BUILD_OP_EXP_FLAG_COMPACT: _ze_rtas_builder_build_op_exp_flag_t =
        _ze_rtas_builder_build_op_exp_flag_t(1);
}
impl _ze_rtas_builder_build_op_exp_flag_t {
    pub const ZE_RTAS_BUILDER_BUILD_OP_EXP_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION:
        _ze_rtas_builder_build_op_exp_flag_t = _ze_rtas_builder_build_op_exp_flag_t(2);
}
impl _ze_rtas_builder_build_op_exp_flag_t {
    pub const ZE_RTAS_BUILDER_BUILD_OP_EXP_FLAG_FORCE_UINT32: _ze_rtas_builder_build_op_exp_flag_t =
        _ze_rtas_builder_build_op_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_build_op_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_build_op_exp_flag_t as ze_rtas_builder_build_op_exp_flag_t;
impl _ze_rtas_builder_build_quality_hint_exp_t {
    pub const ZE_RTAS_BUILDER_BUILD_QUALITY_HINT_EXP_LOW:
        _ze_rtas_builder_build_quality_hint_exp_t = _ze_rtas_builder_build_quality_hint_exp_t(0);
}
impl _ze_rtas_builder_build_quality_hint_exp_t {
    pub const ZE_RTAS_BUILDER_BUILD_QUALITY_HINT_EXP_MEDIUM:
        _ze_rtas_builder_build_quality_hint_exp_t = _ze_rtas_builder_build_quality_hint_exp_t(1);
}
impl _ze_rtas_builder_build_quality_hint_exp_t {
    pub const ZE_RTAS_BUILDER_BUILD_QUALITY_HINT_EXP_HIGH:
        _ze_rtas_builder_build_quality_hint_exp_t = _ze_rtas_builder_build_quality_hint_exp_t(2);
}
impl _ze_rtas_builder_build_quality_hint_exp_t {
    pub const ZE_RTAS_BUILDER_BUILD_QUALITY_HINT_EXP_FORCE_UINT32:
        _ze_rtas_builder_build_quality_hint_exp_t =
        _ze_rtas_builder_build_quality_hint_exp_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_build_quality_hint_exp_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_build_quality_hint_exp_t as ze_rtas_builder_build_quality_hint_exp_t;
impl _ze_rtas_builder_geometry_type_exp_t {
    pub const ZE_RTAS_BUILDER_GEOMETRY_TYPE_EXP_TRIANGLES: _ze_rtas_builder_geometry_type_exp_t =
        _ze_rtas_builder_geometry_type_exp_t(0);
}
impl _ze_rtas_builder_geometry_type_exp_t {
    pub const ZE_RTAS_BUILDER_GEOMETRY_TYPE_EXP_QUADS: _ze_rtas_builder_geometry_type_exp_t =
        _ze_rtas_builder_geometry_type_exp_t(1);
}
impl _ze_rtas_builder_geometry_type_exp_t {
    pub const ZE_RTAS_BUILDER_GEOMETRY_TYPE_EXP_PROCEDURAL: _ze_rtas_builder_geometry_type_exp_t =
        _ze_rtas_builder_geometry_type_exp_t(2);
}
impl _ze_rtas_builder_geometry_type_exp_t {
    pub const ZE_RTAS_BUILDER_GEOMETRY_TYPE_EXP_INSTANCE: _ze_rtas_builder_geometry_type_exp_t =
        _ze_rtas_builder_geometry_type_exp_t(3);
}
impl _ze_rtas_builder_geometry_type_exp_t {
    pub const ZE_RTAS_BUILDER_GEOMETRY_TYPE_EXP_FORCE_UINT32: _ze_rtas_builder_geometry_type_exp_t =
        _ze_rtas_builder_geometry_type_exp_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_geometry_type_exp_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_geometry_type_exp_t as ze_rtas_builder_geometry_type_exp_t;
pub type ze_rtas_builder_packed_geometry_type_exp_t = u8;
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_FLOAT3:
        _ze_rtas_builder_input_data_format_exp_t = _ze_rtas_builder_input_data_format_exp_t(0);
}
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_FLOAT3X4_COLUMN_MAJOR:
        _ze_rtas_builder_input_data_format_exp_t = _ze_rtas_builder_input_data_format_exp_t(1);
}
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_FLOAT3X4_ALIGNED_COLUMN_MAJOR:
        _ze_rtas_builder_input_data_format_exp_t = _ze_rtas_builder_input_data_format_exp_t(2);
}
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_FLOAT3X4_ROW_MAJOR:
        _ze_rtas_builder_input_data_format_exp_t = _ze_rtas_builder_input_data_format_exp_t(3);
}
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_AABB: _ze_rtas_builder_input_data_format_exp_t =
        _ze_rtas_builder_input_data_format_exp_t(4);
}
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_TRIANGLE_INDICES_UINT32:
        _ze_rtas_builder_input_data_format_exp_t = _ze_rtas_builder_input_data_format_exp_t(5);
}
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_QUAD_INDICES_UINT32:
        _ze_rtas_builder_input_data_format_exp_t = _ze_rtas_builder_input_data_format_exp_t(6);
}
impl _ze_rtas_builder_input_data_format_exp_t {
    pub const ZE_RTAS_BUILDER_INPUT_DATA_FORMAT_EXP_FORCE_UINT32:
        _ze_rtas_builder_input_data_format_exp_t =
        _ze_rtas_builder_input_data_format_exp_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_input_data_format_exp_t(pub ::core::ffi::c_uint);
pub use self::_ze_rtas_builder_input_data_format_exp_t as ze_rtas_builder_input_data_format_exp_t;
pub type ze_rtas_builder_packed_input_data_format_exp_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_rtas_builder_exp_handle_t {
    _unused: [u8; 0],
}
pub type ze_rtas_builder_exp_handle_t = *mut _ze_rtas_builder_exp_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ze_rtas_parallel_operation_exp_handle_t {
    _unused: [u8; 0],
}
pub type ze_rtas_parallel_operation_exp_handle_t = *mut _ze_rtas_parallel_operation_exp_handle_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub builderVersion: ze_rtas_builder_exp_version_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_rtas_builder_exp_flags_t,
    pub rtasBufferSizeBytesExpected: usize,
    pub rtasBufferSizeBytesMaxRequired: usize,
    pub scratchBufferSizeBytes: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_parallel_operation_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_rtas_parallel_operation_exp_flags_t,
    pub maxConcurrency: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_device_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub flags: ze_rtas_device_exp_flags_t,
    pub rtasFormat: ze_rtas_format_exp_t,
    pub rtasBufferAlignment: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _ze_rtas_float3_exp_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _ze_rtas_transform_float3x4_column_major_exp_t {
    pub vx_x: f32,
    pub vx_y: f32,
    pub vx_z: f32,
    pub vy_x: f32,
    pub vy_y: f32,
    pub vy_z: f32,
    pub vz_x: f32,
    pub vz_y: f32,
    pub vz_z: f32,
    pub p_x: f32,
    pub p_y: f32,
    pub p_z: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _ze_rtas_transform_float3x4_aligned_column_major_exp_t {
    pub vx_x: f32,
    pub vx_y: f32,
    pub vx_z: f32,
    pub pad0: f32,
    pub vy_x: f32,
    pub vy_y: f32,
    pub vy_z: f32,
    pub pad1: f32,
    pub vz_x: f32,
    pub vz_y: f32,
    pub vz_z: f32,
    pub pad2: f32,
    pub p_x: f32,
    pub p_y: f32,
    pub p_z: f32,
    pub pad3: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _ze_rtas_transform_float3x4_row_major_exp_t {
    pub vx_x: f32,
    pub vy_x: f32,
    pub vz_x: f32,
    pub p_x: f32,
    pub vx_y: f32,
    pub vy_y: f32,
    pub vz_y: f32,
    pub p_y: f32,
    pub vx_z: f32,
    pub vy_z: f32,
    pub vz_z: f32,
    pub p_z: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _ze_rtas_aabb_exp_t {
    pub lower: ze_rtas_float3_exp_t,
    pub upper: ze_rtas_float3_exp_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_triangle_indices_uint32_exp_t {
    pub v0: u32,
    pub v1: u32,
    pub v2: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_quad_indices_uint32_exp_t {
    pub v0: u32,
    pub v1: u32,
    pub v2: u32,
    pub v3: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_geometry_info_exp_t {
    pub geometryType: ze_rtas_builder_packed_geometry_type_exp_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_triangles_geometry_info_exp_t {
    pub geometryType: ze_rtas_builder_packed_geometry_type_exp_t,
    pub geometryFlags: ze_rtas_builder_packed_geometry_exp_flags_t,
    pub geometryMask: u8,
    pub triangleFormat: ze_rtas_builder_packed_input_data_format_exp_t,
    pub vertexFormat: ze_rtas_builder_packed_input_data_format_exp_t,
    pub triangleCount: u32,
    pub vertexCount: u32,
    pub triangleStride: u32,
    pub vertexStride: u32,
    pub pTriangleBuffer: *mut ::core::ffi::c_void,
    pub pVertexBuffer: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_quads_geometry_info_exp_t {
    pub geometryType: ze_rtas_builder_packed_geometry_type_exp_t,
    pub geometryFlags: ze_rtas_builder_packed_geometry_exp_flags_t,
    pub geometryMask: u8,
    pub quadFormat: ze_rtas_builder_packed_input_data_format_exp_t,
    pub vertexFormat: ze_rtas_builder_packed_input_data_format_exp_t,
    pub quadCount: u32,
    pub vertexCount: u32,
    pub quadStride: u32,
    pub vertexStride: u32,
    pub pQuadBuffer: *mut ::core::ffi::c_void,
    pub pVertexBuffer: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_geometry_aabbs_exp_cb_params_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub primID: u32,
    pub primIDCount: u32,
    pub pGeomUserPtr: *mut ::core::ffi::c_void,
    pub pBuildUserPtr: *mut ::core::ffi::c_void,
    pub pBoundsOut: *mut ze_rtas_aabb_exp_t,
}
pub type ze_rtas_geometry_aabbs_cb_exp_t = ::core::option::Option<
    unsafe extern "C" fn(params: *mut ze_rtas_geometry_aabbs_exp_cb_params_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_procedural_geometry_info_exp_t {
    pub geometryType: ze_rtas_builder_packed_geometry_type_exp_t,
    pub geometryFlags: ze_rtas_builder_packed_geometry_exp_flags_t,
    pub geometryMask: u8,
    pub reserved: u8,
    pub primCount: u32,
    pub pfnGetBoundsCb: ze_rtas_geometry_aabbs_cb_exp_t,
    pub pGeomUserPtr: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_instance_geometry_info_exp_t {
    pub geometryType: ze_rtas_builder_packed_geometry_type_exp_t,
    pub instanceFlags: ze_rtas_builder_packed_instance_exp_flags_t,
    pub geometryMask: u8,
    pub transformFormat: ze_rtas_builder_packed_input_data_format_exp_t,
    pub instanceUserID: u32,
    pub pTransform: *mut ::core::ffi::c_void,
    pub pBounds: *mut ze_rtas_aabb_exp_t,
    pub pAccelerationStructure: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_rtas_builder_build_op_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub rtasFormat: ze_rtas_format_exp_t,
    pub buildQuality: ze_rtas_builder_build_quality_hint_exp_t,
    pub buildFlags: ze_rtas_builder_build_op_exp_flags_t,
    pub ppGeometries: *mut *const ze_rtas_builder_geometry_info_exp_t,
    pub numGeometries: u32,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASBuilderCreateExp(
        hDriver: ze_driver_handle_t,
        pDescriptor: *const ze_rtas_builder_exp_desc_t,
        phBuilder: *mut ze_rtas_builder_exp_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASBuilderGetBuildPropertiesExp(
        hBuilder: ze_rtas_builder_exp_handle_t,
        pBuildOpDescriptor: *const ze_rtas_builder_build_op_exp_desc_t,
        pProperties: *mut ze_rtas_builder_exp_properties_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeDriverRTASFormatCompatibilityCheckExp(
        hDriver: ze_driver_handle_t,
        rtasFormatA: ze_rtas_format_exp_t,
        rtasFormatB: ze_rtas_format_exp_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASBuilderBuildExp(
        hBuilder: ze_rtas_builder_exp_handle_t,
        pBuildOpDescriptor: *const ze_rtas_builder_build_op_exp_desc_t,
        pScratchBuffer: *mut ::core::ffi::c_void,
        scratchBufferSizeBytes: usize,
        pRtasBuffer: *mut ::core::ffi::c_void,
        rtasBufferSizeBytes: usize,
        hParallelOperation: ze_rtas_parallel_operation_exp_handle_t,
        pBuildUserPtr: *mut ::core::ffi::c_void,
        pBounds: *mut ze_rtas_aabb_exp_t,
        pRtasBufferSizeBytes: *mut usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASBuilderDestroyExp(hBuilder: ze_rtas_builder_exp_handle_t) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASParallelOperationCreateExp(
        hDriver: ze_driver_handle_t,
        phParallelOperation: *mut ze_rtas_parallel_operation_exp_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASParallelOperationGetPropertiesExp(
        hParallelOperation: ze_rtas_parallel_operation_exp_handle_t,
        pProperties: *mut ze_rtas_parallel_operation_exp_properties_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASParallelOperationJoinExp(
        hParallelOperation: ze_rtas_parallel_operation_exp_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeRTASParallelOperationDestroyExp(
        hParallelOperation: ze_rtas_parallel_operation_exp_handle_t,
    ) -> ze_result_t;
}
impl _ze_event_pool_counter_based_exp_version_t {
    pub const ZE_EVENT_POOL_COUNTER_BASED_EXP_VERSION_1_0:
        _ze_event_pool_counter_based_exp_version_t =
        _ze_event_pool_counter_based_exp_version_t(65536);
}
impl _ze_event_pool_counter_based_exp_version_t {
    pub const ZE_EVENT_POOL_COUNTER_BASED_EXP_VERSION_CURRENT:
        _ze_event_pool_counter_based_exp_version_t =
        _ze_event_pool_counter_based_exp_version_t(65536);
}
impl _ze_event_pool_counter_based_exp_version_t {
    pub const ZE_EVENT_POOL_COUNTER_BASED_EXP_VERSION_FORCE_UINT32:
        _ze_event_pool_counter_based_exp_version_t =
        _ze_event_pool_counter_based_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_counter_based_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_event_pool_counter_based_exp_version_t as ze_event_pool_counter_based_exp_version_t;
pub type ze_event_pool_counter_based_exp_flags_t = u32;
impl _ze_event_pool_counter_based_exp_flag_t {
    pub const ZE_EVENT_POOL_COUNTER_BASED_EXP_FLAG_IMMEDIATE:
        _ze_event_pool_counter_based_exp_flag_t = _ze_event_pool_counter_based_exp_flag_t(1);
}
impl _ze_event_pool_counter_based_exp_flag_t {
    pub const ZE_EVENT_POOL_COUNTER_BASED_EXP_FLAG_NON_IMMEDIATE:
        _ze_event_pool_counter_based_exp_flag_t = _ze_event_pool_counter_based_exp_flag_t(2);
}
impl _ze_event_pool_counter_based_exp_flag_t {
    pub const ZE_EVENT_POOL_COUNTER_BASED_EXP_FLAG_FORCE_UINT32:
        _ze_event_pool_counter_based_exp_flag_t =
        _ze_event_pool_counter_based_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_counter_based_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_event_pool_counter_based_exp_flag_t as ze_event_pool_counter_based_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_counter_based_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_event_pool_counter_based_exp_flags_t,
}
impl _ze_bindless_image_exp_version_t {
    pub const ZE_BINDLESS_IMAGE_EXP_VERSION_1_0: _ze_bindless_image_exp_version_t =
        _ze_bindless_image_exp_version_t(65536);
}
impl _ze_bindless_image_exp_version_t {
    pub const ZE_BINDLESS_IMAGE_EXP_VERSION_CURRENT: _ze_bindless_image_exp_version_t =
        _ze_bindless_image_exp_version_t(65536);
}
impl _ze_bindless_image_exp_version_t {
    pub const ZE_BINDLESS_IMAGE_EXP_VERSION_FORCE_UINT32: _ze_bindless_image_exp_version_t =
        _ze_bindless_image_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_bindless_image_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_bindless_image_exp_version_t as ze_bindless_image_exp_version_t;
pub type ze_image_bindless_exp_flags_t = u32;
impl _ze_image_bindless_exp_flag_t {
    pub const ZE_IMAGE_BINDLESS_EXP_FLAG_BINDLESS: _ze_image_bindless_exp_flag_t =
        _ze_image_bindless_exp_flag_t(1);
}
impl _ze_image_bindless_exp_flag_t {
    pub const ZE_IMAGE_BINDLESS_EXP_FLAG_SAMPLED_IMAGE: _ze_image_bindless_exp_flag_t =
        _ze_image_bindless_exp_flag_t(2);
}
impl _ze_image_bindless_exp_flag_t {
    pub const ZE_IMAGE_BINDLESS_EXP_FLAG_FORCE_UINT32: _ze_image_bindless_exp_flag_t =
        _ze_image_bindless_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_bindless_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_image_bindless_exp_flag_t as ze_image_bindless_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_bindless_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_image_bindless_exp_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_pitched_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub ptr: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_pitched_alloc_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub maxImageLinearWidth: usize,
    pub maxImageLinearHeight: usize,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeMemGetPitchFor2dImage(
        hContext: ze_context_handle_t,
        hDevice: ze_device_handle_t,
        imageWidth: usize,
        imageHeight: usize,
        elementSizeInBytes: ::core::ffi::c_uint,
        rowPitch: *mut usize,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeImageGetDeviceOffsetExp(
        hImage: ze_image_handle_t,
        pDeviceOffset: *mut u64,
    ) -> ze_result_t;
}
impl _ze_command_list_clone_exp_version_t {
    pub const ZE_COMMAND_LIST_CLONE_EXP_VERSION_1_0: _ze_command_list_clone_exp_version_t =
        _ze_command_list_clone_exp_version_t(65536);
}
impl _ze_command_list_clone_exp_version_t {
    pub const ZE_COMMAND_LIST_CLONE_EXP_VERSION_CURRENT: _ze_command_list_clone_exp_version_t =
        _ze_command_list_clone_exp_version_t(65536);
}
impl _ze_command_list_clone_exp_version_t {
    pub const ZE_COMMAND_LIST_CLONE_EXP_VERSION_FORCE_UINT32: _ze_command_list_clone_exp_version_t =
        _ze_command_list_clone_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_clone_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_command_list_clone_exp_version_t as ze_command_list_clone_exp_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListCreateCloneExp(
        hCommandList: ze_command_list_handle_t,
        phClonedCommandList: *mut ze_command_list_handle_t,
    ) -> ze_result_t;
}
impl _ze_immediate_command_list_append_exp_version_t {
    pub const ZE_IMMEDIATE_COMMAND_LIST_APPEND_EXP_VERSION_1_0:
        _ze_immediate_command_list_append_exp_version_t =
        _ze_immediate_command_list_append_exp_version_t(65536);
}
impl _ze_immediate_command_list_append_exp_version_t {
    pub const ZE_IMMEDIATE_COMMAND_LIST_APPEND_EXP_VERSION_CURRENT:
        _ze_immediate_command_list_append_exp_version_t =
        _ze_immediate_command_list_append_exp_version_t(65536);
}
impl _ze_immediate_command_list_append_exp_version_t {
    pub const ZE_IMMEDIATE_COMMAND_LIST_APPEND_EXP_VERSION_FORCE_UINT32:
        _ze_immediate_command_list_append_exp_version_t =
        _ze_immediate_command_list_append_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_immediate_command_list_append_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_immediate_command_list_append_exp_version_t as ze_immediate_command_list_append_exp_version_t;
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListImmediateAppendCommandListsExp(
        hCommandListImmediate: ze_command_list_handle_t,
        numCommandLists: u32,
        phCommandLists: *mut ze_command_list_handle_t,
        hSignalEvent: ze_event_handle_t,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
impl _ze_mutable_command_list_exp_version_t {
    pub const ZE_MUTABLE_COMMAND_LIST_EXP_VERSION_1_0: _ze_mutable_command_list_exp_version_t =
        _ze_mutable_command_list_exp_version_t(65536);
}
impl _ze_mutable_command_list_exp_version_t {
    pub const ZE_MUTABLE_COMMAND_LIST_EXP_VERSION_1_1: _ze_mutable_command_list_exp_version_t =
        _ze_mutable_command_list_exp_version_t(65537);
}
impl _ze_mutable_command_list_exp_version_t {
    pub const ZE_MUTABLE_COMMAND_LIST_EXP_VERSION_CURRENT: _ze_mutable_command_list_exp_version_t =
        _ze_mutable_command_list_exp_version_t(65537);
}
impl _ze_mutable_command_list_exp_version_t {
    pub const ZE_MUTABLE_COMMAND_LIST_EXP_VERSION_FORCE_UINT32:
        _ze_mutable_command_list_exp_version_t = _ze_mutable_command_list_exp_version_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_command_list_exp_version_t(pub ::core::ffi::c_uint);
pub use self::_ze_mutable_command_list_exp_version_t as ze_mutable_command_list_exp_version_t;
pub type ze_mutable_command_exp_flags_t = u32;
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_KERNEL_ARGUMENTS: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(1);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_GROUP_COUNT: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(2);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_GROUP_SIZE: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(4);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_GLOBAL_OFFSET: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(8);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_SIGNAL_EVENT: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(16);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_WAIT_EVENTS: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(32);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_KERNEL_INSTRUCTION: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(64);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_GRAPH_ARGUMENTS: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(128);
}
impl _ze_mutable_command_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_EXP_FLAG_FORCE_UINT32: _ze_mutable_command_exp_flag_t =
        _ze_mutable_command_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_command_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_mutable_command_exp_flag_t as ze_mutable_command_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_command_id_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_mutable_command_exp_flags_t,
}
pub type ze_mutable_command_list_exp_flags_t = u32;
impl _ze_mutable_command_list_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_LIST_EXP_FLAG_RESERVED: _ze_mutable_command_list_exp_flag_t =
        _ze_mutable_command_list_exp_flag_t(1);
}
impl _ze_mutable_command_list_exp_flag_t {
    pub const ZE_MUTABLE_COMMAND_LIST_EXP_FLAG_FORCE_UINT32: _ze_mutable_command_list_exp_flag_t =
        _ze_mutable_command_list_exp_flag_t(2147483647);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_command_list_exp_flag_t(pub ::core::ffi::c_uint);
pub use self::_ze_mutable_command_list_exp_flag_t as ze_mutable_command_list_exp_flag_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_command_list_exp_properties_t {
    pub stype: ze_structure_type_t,
    pub pNext: *mut ::core::ffi::c_void,
    pub mutableCommandListFlags: ze_mutable_command_list_exp_flags_t,
    pub mutableCommandFlags: ze_mutable_command_exp_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_command_list_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: ze_mutable_command_list_exp_flags_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_commands_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub flags: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_kernel_argument_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub commandId: u64,
    pub argIndex: u32,
    pub argSize: usize,
    pub pArgValue: *const ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_group_count_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub commandId: u64,
    pub pGroupCount: *const ze_group_count_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_group_size_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub commandId: u64,
    pub groupSizeX: u32,
    pub groupSizeY: u32,
    pub groupSizeZ: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_global_offset_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub commandId: u64,
    pub offsetX: u32,
    pub offsetY: u32,
    pub offsetZ: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mutable_graph_argument_exp_desc_t {
    pub stype: ze_structure_type_t,
    pub pNext: *const ::core::ffi::c_void,
    pub commandId: u64,
    pub argIndex: u32,
    pub pArgValue: *const ::core::ffi::c_void,
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListGetNextCommandIdExp(
        hCommandList: ze_command_list_handle_t,
        desc: *const ze_mutable_command_id_exp_desc_t,
        pCommandId: *mut u64,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListGetNextCommandIdWithKernelsExp(
        hCommandList: ze_command_list_handle_t,
        desc: *const ze_mutable_command_id_exp_desc_t,
        numKernels: u32,
        phKernels: *mut ze_kernel_handle_t,
        pCommandId: *mut u64,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListUpdateMutableCommandsExp(
        hCommandList: ze_command_list_handle_t,
        desc: *const ze_mutable_commands_exp_desc_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListUpdateMutableCommandSignalEventExp(
        hCommandList: ze_command_list_handle_t,
        commandId: u64,
        hSignalEvent: ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListUpdateMutableCommandWaitEventsExp(
        hCommandList: ze_command_list_handle_t,
        commandId: u64,
        numWaitEvents: u32,
        phWaitEvents: *mut ze_event_handle_t,
    ) -> ze_result_t;
}
unsafe extern "C" {
    #[must_use]
    pub fn zeCommandListUpdateMutableCommandKernelsExp(
        hCommandList: ze_command_list_handle_t,
        numKernels: u32,
        pCommandId: *mut u64,
        phKernels: *mut ze_kernel_handle_t,
    ) -> ze_result_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_init_params_t {
    pub pflags: *mut ze_init_flags_t,
}
pub type ze_init_params_t = _ze_init_params_t;
pub type ze_pfnInitCb_t = ::core::option::Option<
    unsafe extern "C" fn(
        params: *mut ze_init_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_global_callbacks_t {
    pub pfnInitCb: ze_pfnInitCb_t,
}
pub type ze_global_callbacks_t = _ze_global_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_get_params_t {
    pub ppCount: *mut *mut u32,
    pub pphDrivers: *mut *mut ze_driver_handle_t,
}
pub type ze_driver_get_params_t = _ze_driver_get_params_t;
pub type ze_pfnDriverGetCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_driver_get_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_get_api_version_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub pversion: *mut *mut ze_api_version_t,
}
pub type ze_driver_get_api_version_params_t = _ze_driver_get_api_version_params_t;
pub type ze_pfnDriverGetApiVersionCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_driver_get_api_version_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_get_properties_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppDriverProperties: *mut *mut ze_driver_properties_t,
}
pub type ze_driver_get_properties_params_t = _ze_driver_get_properties_params_t;
pub type ze_pfnDriverGetPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_driver_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_get_ipc_properties_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppIpcProperties: *mut *mut ze_driver_ipc_properties_t,
}
pub type ze_driver_get_ipc_properties_params_t = _ze_driver_get_ipc_properties_params_t;
pub type ze_pfnDriverGetIpcPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_driver_get_ipc_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_get_extension_properties_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppExtensionProperties: *mut *mut ze_driver_extension_properties_t,
}
pub type ze_driver_get_extension_properties_params_t = _ze_driver_get_extension_properties_params_t;
pub type ze_pfnDriverGetExtensionPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_driver_get_extension_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_driver_callbacks_t {
    pub pfnGetCb: ze_pfnDriverGetCb_t,
    pub pfnGetApiVersionCb: ze_pfnDriverGetApiVersionCb_t,
    pub pfnGetPropertiesCb: ze_pfnDriverGetPropertiesCb_t,
    pub pfnGetIpcPropertiesCb: ze_pfnDriverGetIpcPropertiesCb_t,
    pub pfnGetExtensionPropertiesCb: ze_pfnDriverGetExtensionPropertiesCb_t,
}
pub type ze_driver_callbacks_t = _ze_driver_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub ppCount: *mut *mut u32,
    pub pphDevices: *mut *mut ze_device_handle_t,
}
pub type ze_device_get_params_t = _ze_device_get_params_t;
pub type ze_pfnDeviceGetCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_sub_devices_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub pphSubdevices: *mut *mut ze_device_handle_t,
}
pub type ze_device_get_sub_devices_params_t = _ze_device_get_sub_devices_params_t;
pub type ze_pfnDeviceGetSubDevicesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_sub_devices_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppDeviceProperties: *mut *mut ze_device_properties_t,
}
pub type ze_device_get_properties_params_t = _ze_device_get_properties_params_t;
pub type ze_pfnDeviceGetPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_compute_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppComputeProperties: *mut *mut ze_device_compute_properties_t,
}
pub type ze_device_get_compute_properties_params_t = _ze_device_get_compute_properties_params_t;
pub type ze_pfnDeviceGetComputePropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_compute_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_module_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppModuleProperties: *mut *mut ze_device_module_properties_t,
}
pub type ze_device_get_module_properties_params_t = _ze_device_get_module_properties_params_t;
pub type ze_pfnDeviceGetModulePropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_module_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_command_queue_group_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppCommandQueueGroupProperties: *mut *mut ze_command_queue_group_properties_t,
}
pub type ze_device_get_command_queue_group_properties_params_t =
    _ze_device_get_command_queue_group_properties_params_t;
pub type ze_pfnDeviceGetCommandQueueGroupPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_command_queue_group_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_memory_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppMemProperties: *mut *mut ze_device_memory_properties_t,
}
pub type ze_device_get_memory_properties_params_t = _ze_device_get_memory_properties_params_t;
pub type ze_pfnDeviceGetMemoryPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_memory_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_memory_access_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppMemAccessProperties: *mut *mut ze_device_memory_access_properties_t,
}
pub type ze_device_get_memory_access_properties_params_t =
    _ze_device_get_memory_access_properties_params_t;
pub type ze_pfnDeviceGetMemoryAccessPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_memory_access_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_cache_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppCacheProperties: *mut *mut ze_device_cache_properties_t,
}
pub type ze_device_get_cache_properties_params_t = _ze_device_get_cache_properties_params_t;
pub type ze_pfnDeviceGetCachePropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_cache_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_image_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppImageProperties: *mut *mut ze_device_image_properties_t,
}
pub type ze_device_get_image_properties_params_t = _ze_device_get_image_properties_params_t;
pub type ze_pfnDeviceGetImagePropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_image_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_external_memory_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub ppExternalMemoryProperties: *mut *mut ze_device_external_memory_properties_t,
}
pub type ze_device_get_external_memory_properties_params_t =
    _ze_device_get_external_memory_properties_params_t;
pub type ze_pfnDeviceGetExternalMemoryPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_external_memory_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_p2_p_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub phPeerDevice: *mut ze_device_handle_t,
    pub ppP2PProperties: *mut *mut ze_device_p2p_properties_t,
}
pub type ze_device_get_p2_p_properties_params_t = _ze_device_get_p2_p_properties_params_t;
pub type ze_pfnDeviceGetP2PPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_p2_p_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_can_access_peer_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub phPeerDevice: *mut ze_device_handle_t,
    pub pvalue: *mut *mut ze_bool_t,
}
pub type ze_device_can_access_peer_params_t = _ze_device_can_access_peer_params_t;
pub type ze_pfnDeviceCanAccessPeerCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_can_access_peer_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_get_status_params_t {
    pub phDevice: *mut ze_device_handle_t,
}
pub type ze_device_get_status_params_t = _ze_device_get_status_params_t;
pub type ze_pfnDeviceGetStatusCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_device_get_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_device_callbacks_t {
    pub pfnGetCb: ze_pfnDeviceGetCb_t,
    pub pfnGetSubDevicesCb: ze_pfnDeviceGetSubDevicesCb_t,
    pub pfnGetPropertiesCb: ze_pfnDeviceGetPropertiesCb_t,
    pub pfnGetComputePropertiesCb: ze_pfnDeviceGetComputePropertiesCb_t,
    pub pfnGetModulePropertiesCb: ze_pfnDeviceGetModulePropertiesCb_t,
    pub pfnGetCommandQueueGroupPropertiesCb: ze_pfnDeviceGetCommandQueueGroupPropertiesCb_t,
    pub pfnGetMemoryPropertiesCb: ze_pfnDeviceGetMemoryPropertiesCb_t,
    pub pfnGetMemoryAccessPropertiesCb: ze_pfnDeviceGetMemoryAccessPropertiesCb_t,
    pub pfnGetCachePropertiesCb: ze_pfnDeviceGetCachePropertiesCb_t,
    pub pfnGetImagePropertiesCb: ze_pfnDeviceGetImagePropertiesCb_t,
    pub pfnGetExternalMemoryPropertiesCb: ze_pfnDeviceGetExternalMemoryPropertiesCb_t,
    pub pfnGetP2PPropertiesCb: ze_pfnDeviceGetP2PPropertiesCb_t,
    pub pfnCanAccessPeerCb: ze_pfnDeviceCanAccessPeerCb_t,
    pub pfnGetStatusCb: ze_pfnDeviceGetStatusCb_t,
}
pub type ze_device_callbacks_t = _ze_device_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_create_params_t {
    pub phDriver: *mut ze_driver_handle_t,
    pub pdesc: *mut *const ze_context_desc_t,
    pub pphContext: *mut *mut ze_context_handle_t,
}
pub type ze_context_create_params_t = _ze_context_create_params_t;
pub type ze_pfnContextCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_destroy_params_t {
    pub phContext: *mut ze_context_handle_t,
}
pub type ze_context_destroy_params_t = _ze_context_destroy_params_t;
pub type ze_pfnContextDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_get_status_params_t {
    pub phContext: *mut ze_context_handle_t,
}
pub type ze_context_get_status_params_t = _ze_context_get_status_params_t;
pub type ze_pfnContextGetStatusCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_get_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_system_barrier_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
}
pub type ze_context_system_barrier_params_t = _ze_context_system_barrier_params_t;
pub type ze_pfnContextSystemBarrierCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_system_barrier_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_make_memory_resident_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pptr: *mut *mut ::core::ffi::c_void,
    pub psize: *mut usize,
}
pub type ze_context_make_memory_resident_params_t = _ze_context_make_memory_resident_params_t;
pub type ze_pfnContextMakeMemoryResidentCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_make_memory_resident_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_evict_memory_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pptr: *mut *mut ::core::ffi::c_void,
    pub psize: *mut usize,
}
pub type ze_context_evict_memory_params_t = _ze_context_evict_memory_params_t;
pub type ze_pfnContextEvictMemoryCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_evict_memory_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_make_image_resident_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub phImage: *mut ze_image_handle_t,
}
pub type ze_context_make_image_resident_params_t = _ze_context_make_image_resident_params_t;
pub type ze_pfnContextMakeImageResidentCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_make_image_resident_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_evict_image_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub phImage: *mut ze_image_handle_t,
}
pub type ze_context_evict_image_params_t = _ze_context_evict_image_params_t;
pub type ze_pfnContextEvictImageCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_context_evict_image_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_context_callbacks_t {
    pub pfnCreateCb: ze_pfnContextCreateCb_t,
    pub pfnDestroyCb: ze_pfnContextDestroyCb_t,
    pub pfnGetStatusCb: ze_pfnContextGetStatusCb_t,
    pub pfnSystemBarrierCb: ze_pfnContextSystemBarrierCb_t,
    pub pfnMakeMemoryResidentCb: ze_pfnContextMakeMemoryResidentCb_t,
    pub pfnEvictMemoryCb: ze_pfnContextEvictMemoryCb_t,
    pub pfnMakeImageResidentCb: ze_pfnContextMakeImageResidentCb_t,
    pub pfnEvictImageCb: ze_pfnContextEvictImageCb_t,
}
pub type ze_context_callbacks_t = _ze_context_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_command_queue_desc_t,
    pub pphCommandQueue: *mut *mut ze_command_queue_handle_t,
}
pub type ze_command_queue_create_params_t = _ze_command_queue_create_params_t;
pub type ze_pfnCommandQueueCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_queue_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_destroy_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
}
pub type ze_command_queue_destroy_params_t = _ze_command_queue_destroy_params_t;
pub type ze_pfnCommandQueueDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_queue_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_execute_command_lists_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
    pub pnumCommandLists: *mut u32,
    pub pphCommandLists: *mut *mut ze_command_list_handle_t,
    pub phFence: *mut ze_fence_handle_t,
}
pub type ze_command_queue_execute_command_lists_params_t =
    _ze_command_queue_execute_command_lists_params_t;
pub type ze_pfnCommandQueueExecuteCommandListsCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_queue_execute_command_lists_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_synchronize_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
    pub ptimeout: *mut u64,
}
pub type ze_command_queue_synchronize_params_t = _ze_command_queue_synchronize_params_t;
pub type ze_pfnCommandQueueSynchronizeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_queue_synchronize_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_queue_callbacks_t {
    pub pfnCreateCb: ze_pfnCommandQueueCreateCb_t,
    pub pfnDestroyCb: ze_pfnCommandQueueDestroyCb_t,
    pub pfnExecuteCommandListsCb: ze_pfnCommandQueueExecuteCommandListsCb_t,
    pub pfnSynchronizeCb: ze_pfnCommandQueueSynchronizeCb_t,
}
pub type ze_command_queue_callbacks_t = _ze_command_queue_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_command_list_desc_t,
    pub pphCommandList: *mut *mut ze_command_list_handle_t,
}
pub type ze_command_list_create_params_t = _ze_command_list_create_params_t;
pub type ze_pfnCommandListCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_create_immediate_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub paltdesc: *mut *const ze_command_queue_desc_t,
    pub pphCommandList: *mut *mut ze_command_list_handle_t,
}
pub type ze_command_list_create_immediate_params_t = _ze_command_list_create_immediate_params_t;
pub type ze_pfnCommandListCreateImmediateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_create_immediate_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_destroy_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
}
pub type ze_command_list_destroy_params_t = _ze_command_list_destroy_params_t;
pub type ze_pfnCommandListDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_close_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
}
pub type ze_command_list_close_params_t = _ze_command_list_close_params_t;
pub type ze_pfnCommandListCloseCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_close_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_reset_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
}
pub type ze_command_list_reset_params_t = _ze_command_list_reset_params_t;
pub type ze_pfnCommandListResetCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_write_global_timestamp_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut u64,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_write_global_timestamp_params_t =
    _ze_command_list_append_write_global_timestamp_params_t;
pub type ze_pfnCommandListAppendWriteGlobalTimestampCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_write_global_timestamp_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_barrier_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_barrier_params_t = _ze_command_list_append_barrier_params_t;
pub type ze_pfnCommandListAppendBarrierCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_barrier_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_memory_ranges_barrier_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumRanges: *mut u32,
    pub ppRangeSizes: *mut *const usize,
    pub ppRanges: *mut *mut *const ::core::ffi::c_void,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_memory_ranges_barrier_params_t =
    _ze_command_list_append_memory_ranges_barrier_params_t;
pub type ze_pfnCommandListAppendMemoryRangesBarrierCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_memory_ranges_barrier_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_memory_copy_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::core::ffi::c_void,
    pub psrcptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_memory_copy_params_t = _ze_command_list_append_memory_copy_params_t;
pub type ze_pfnCommandListAppendMemoryCopyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_memory_copy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_memory_fill_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pptr: *mut *mut ::core::ffi::c_void,
    pub ppattern: *mut *const ::core::ffi::c_void,
    pub ppattern_size: *mut usize,
    pub psize: *mut usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_memory_fill_params_t = _ze_command_list_append_memory_fill_params_t;
pub type ze_pfnCommandListAppendMemoryFillCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_memory_fill_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_memory_copy_region_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::core::ffi::c_void,
    pub pdstRegion: *mut *const ze_copy_region_t,
    pub pdstPitch: *mut u32,
    pub pdstSlicePitch: *mut u32,
    pub psrcptr: *mut *const ::core::ffi::c_void,
    pub psrcRegion: *mut *const ze_copy_region_t,
    pub psrcPitch: *mut u32,
    pub psrcSlicePitch: *mut u32,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_memory_copy_region_params_t =
    _ze_command_list_append_memory_copy_region_params_t;
pub type ze_pfnCommandListAppendMemoryCopyRegionCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_memory_copy_region_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_memory_copy_from_context_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::core::ffi::c_void,
    pub phContextSrc: *mut ze_context_handle_t,
    pub psrcptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_memory_copy_from_context_params_t =
    _ze_command_list_append_memory_copy_from_context_params_t;
pub type ze_pfnCommandListAppendMemoryCopyFromContextCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_memory_copy_from_context_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_image_copy_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDstImage: *mut ze_image_handle_t,
    pub phSrcImage: *mut ze_image_handle_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_image_copy_params_t = _ze_command_list_append_image_copy_params_t;
pub type ze_pfnCommandListAppendImageCopyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_image_copy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_image_copy_region_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDstImage: *mut ze_image_handle_t,
    pub phSrcImage: *mut ze_image_handle_t,
    pub ppDstRegion: *mut *const ze_image_region_t,
    pub ppSrcRegion: *mut *const ze_image_region_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_image_copy_region_params_t =
    _ze_command_list_append_image_copy_region_params_t;
pub type ze_pfnCommandListAppendImageCopyRegionCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_image_copy_region_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_image_copy_to_memory_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pdstptr: *mut *mut ::core::ffi::c_void,
    pub phSrcImage: *mut ze_image_handle_t,
    pub ppSrcRegion: *mut *const ze_image_region_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_image_copy_to_memory_params_t =
    _ze_command_list_append_image_copy_to_memory_params_t;
pub type ze_pfnCommandListAppendImageCopyToMemoryCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_image_copy_to_memory_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_image_copy_from_memory_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDstImage: *mut ze_image_handle_t,
    pub psrcptr: *mut *const ::core::ffi::c_void,
    pub ppDstRegion: *mut *const ze_image_region_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_image_copy_from_memory_params_t =
    _ze_command_list_append_image_copy_from_memory_params_t;
pub type ze_pfnCommandListAppendImageCopyFromMemoryCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_image_copy_from_memory_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_memory_prefetch_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
}
pub type ze_command_list_append_memory_prefetch_params_t =
    _ze_command_list_append_memory_prefetch_params_t;
pub type ze_pfnCommandListAppendMemoryPrefetchCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_memory_prefetch_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_mem_advise_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
    pub padvice: *mut ze_memory_advice_t,
}
pub type ze_command_list_append_mem_advise_params_t = _ze_command_list_append_mem_advise_params_t;
pub type ze_pfnCommandListAppendMemAdviseCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_mem_advise_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_signal_event_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phEvent: *mut ze_event_handle_t,
}
pub type ze_command_list_append_signal_event_params_t =
    _ze_command_list_append_signal_event_params_t;
pub type ze_pfnCommandListAppendSignalEventCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_signal_event_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_wait_on_events_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumEvents: *mut u32,
    pub pphEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_wait_on_events_params_t =
    _ze_command_list_append_wait_on_events_params_t;
pub type ze_pfnCommandListAppendWaitOnEventsCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_wait_on_events_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_event_reset_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phEvent: *mut ze_event_handle_t,
}
pub type ze_command_list_append_event_reset_params_t = _ze_command_list_append_event_reset_params_t;
pub type ze_pfnCommandListAppendEventResetCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_event_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_query_kernel_timestamps_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumEvents: *mut u32,
    pub pphEvents: *mut *mut ze_event_handle_t,
    pub pdstptr: *mut *mut ::core::ffi::c_void,
    pub ppOffsets: *mut *const usize,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_query_kernel_timestamps_params_t =
    _ze_command_list_append_query_kernel_timestamps_params_t;
pub type ze_pfnCommandListAppendQueryKernelTimestampsCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_query_kernel_timestamps_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_launch_kernel_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppLaunchFuncArgs: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_launch_kernel_params_t =
    _ze_command_list_append_launch_kernel_params_t;
pub type ze_pfnCommandListAppendLaunchKernelCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_launch_kernel_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_launch_cooperative_kernel_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppLaunchFuncArgs: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_launch_cooperative_kernel_params_t =
    _ze_command_list_append_launch_cooperative_kernel_params_t;
pub type ze_pfnCommandListAppendLaunchCooperativeKernelCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_launch_cooperative_kernel_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_launch_kernel_indirect_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppLaunchArgumentsBuffer: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_launch_kernel_indirect_params_t =
    _ze_command_list_append_launch_kernel_indirect_params_t;
pub type ze_pfnCommandListAppendLaunchKernelIndirectCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_launch_kernel_indirect_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_append_launch_multiple_kernels_indirect_params_t {
    pub phCommandList: *mut ze_command_list_handle_t,
    pub pnumKernels: *mut u32,
    pub pphKernels: *mut *mut ze_kernel_handle_t,
    pub ppCountBuffer: *mut *const u32,
    pub ppLaunchArgumentsBuffer: *mut *const ze_group_count_t,
    pub phSignalEvent: *mut ze_event_handle_t,
    pub pnumWaitEvents: *mut u32,
    pub pphWaitEvents: *mut *mut ze_event_handle_t,
}
pub type ze_command_list_append_launch_multiple_kernels_indirect_params_t =
    _ze_command_list_append_launch_multiple_kernels_indirect_params_t;
pub type ze_pfnCommandListAppendLaunchMultipleKernelsIndirectCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_command_list_append_launch_multiple_kernels_indirect_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_command_list_callbacks_t {
    pub pfnCreateCb: ze_pfnCommandListCreateCb_t,
    pub pfnCreateImmediateCb: ze_pfnCommandListCreateImmediateCb_t,
    pub pfnDestroyCb: ze_pfnCommandListDestroyCb_t,
    pub pfnCloseCb: ze_pfnCommandListCloseCb_t,
    pub pfnResetCb: ze_pfnCommandListResetCb_t,
    pub pfnAppendWriteGlobalTimestampCb: ze_pfnCommandListAppendWriteGlobalTimestampCb_t,
    pub pfnAppendBarrierCb: ze_pfnCommandListAppendBarrierCb_t,
    pub pfnAppendMemoryRangesBarrierCb: ze_pfnCommandListAppendMemoryRangesBarrierCb_t,
    pub pfnAppendMemoryCopyCb: ze_pfnCommandListAppendMemoryCopyCb_t,
    pub pfnAppendMemoryFillCb: ze_pfnCommandListAppendMemoryFillCb_t,
    pub pfnAppendMemoryCopyRegionCb: ze_pfnCommandListAppendMemoryCopyRegionCb_t,
    pub pfnAppendMemoryCopyFromContextCb: ze_pfnCommandListAppendMemoryCopyFromContextCb_t,
    pub pfnAppendImageCopyCb: ze_pfnCommandListAppendImageCopyCb_t,
    pub pfnAppendImageCopyRegionCb: ze_pfnCommandListAppendImageCopyRegionCb_t,
    pub pfnAppendImageCopyToMemoryCb: ze_pfnCommandListAppendImageCopyToMemoryCb_t,
    pub pfnAppendImageCopyFromMemoryCb: ze_pfnCommandListAppendImageCopyFromMemoryCb_t,
    pub pfnAppendMemoryPrefetchCb: ze_pfnCommandListAppendMemoryPrefetchCb_t,
    pub pfnAppendMemAdviseCb: ze_pfnCommandListAppendMemAdviseCb_t,
    pub pfnAppendSignalEventCb: ze_pfnCommandListAppendSignalEventCb_t,
    pub pfnAppendWaitOnEventsCb: ze_pfnCommandListAppendWaitOnEventsCb_t,
    pub pfnAppendEventResetCb: ze_pfnCommandListAppendEventResetCb_t,
    pub pfnAppendQueryKernelTimestampsCb: ze_pfnCommandListAppendQueryKernelTimestampsCb_t,
    pub pfnAppendLaunchKernelCb: ze_pfnCommandListAppendLaunchKernelCb_t,
    pub pfnAppendLaunchCooperativeKernelCb: ze_pfnCommandListAppendLaunchCooperativeKernelCb_t,
    pub pfnAppendLaunchKernelIndirectCb: ze_pfnCommandListAppendLaunchKernelIndirectCb_t,
    pub pfnAppendLaunchMultipleKernelsIndirectCb:
        ze_pfnCommandListAppendLaunchMultipleKernelsIndirectCb_t,
}
pub type ze_command_list_callbacks_t = _ze_command_list_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_get_properties_params_t {
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_image_desc_t,
    pub ppImageProperties: *mut *mut ze_image_properties_t,
}
pub type ze_image_get_properties_params_t = _ze_image_get_properties_params_t;
pub type ze_pfnImageGetPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_image_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_image_desc_t,
    pub pphImage: *mut *mut ze_image_handle_t,
}
pub type ze_image_create_params_t = _ze_image_create_params_t;
pub type ze_pfnImageCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_image_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_destroy_params_t {
    pub phImage: *mut ze_image_handle_t,
}
pub type ze_image_destroy_params_t = _ze_image_destroy_params_t;
pub type ze_pfnImageDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_image_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_image_callbacks_t {
    pub pfnGetPropertiesCb: ze_pfnImageGetPropertiesCb_t,
    pub pfnCreateCb: ze_pfnImageCreateCb_t,
    pub pfnDestroyCb: ze_pfnImageDestroyCb_t,
}
pub type ze_image_callbacks_t = _ze_image_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_alloc_shared_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pdevice_desc: *mut *const ze_device_mem_alloc_desc_t,
    pub phost_desc: *mut *const ze_host_mem_alloc_desc_t,
    pub psize: *mut usize,
    pub palignment: *mut usize,
    pub phDevice: *mut ze_device_handle_t,
    pub ppptr: *mut *mut *mut ::core::ffi::c_void,
}
pub type ze_mem_alloc_shared_params_t = _ze_mem_alloc_shared_params_t;
pub type ze_pfnMemAllocSharedCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_alloc_shared_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_alloc_device_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pdevice_desc: *mut *const ze_device_mem_alloc_desc_t,
    pub psize: *mut usize,
    pub palignment: *mut usize,
    pub phDevice: *mut ze_device_handle_t,
    pub ppptr: *mut *mut *mut ::core::ffi::c_void,
}
pub type ze_mem_alloc_device_params_t = _ze_mem_alloc_device_params_t;
pub type ze_pfnMemAllocDeviceCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_alloc_device_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_alloc_host_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phost_desc: *mut *const ze_host_mem_alloc_desc_t,
    pub psize: *mut usize,
    pub palignment: *mut usize,
    pub ppptr: *mut *mut *mut ::core::ffi::c_void,
}
pub type ze_mem_alloc_host_params_t = _ze_mem_alloc_host_params_t;
pub type ze_pfnMemAllocHostCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_alloc_host_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_free_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *mut ::core::ffi::c_void,
}
pub type ze_mem_free_params_t = _ze_mem_free_params_t;
pub type ze_pfnMemFreeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_free_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_get_alloc_properties_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub ppMemAllocProperties: *mut *mut ze_memory_allocation_properties_t,
    pub pphDevice: *mut *mut ze_device_handle_t,
}
pub type ze_mem_get_alloc_properties_params_t = _ze_mem_get_alloc_properties_params_t;
pub type ze_pfnMemGetAllocPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_get_alloc_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_get_address_range_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub ppBase: *mut *mut *mut ::core::ffi::c_void,
    pub ppSize: *mut *mut usize,
}
pub type ze_mem_get_address_range_params_t = _ze_mem_get_address_range_params_t;
pub type ze_pfnMemGetAddressRangeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_get_address_range_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_get_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub ppIpcHandle: *mut *mut ze_ipc_mem_handle_t,
}
pub type ze_mem_get_ipc_handle_params_t = _ze_mem_get_ipc_handle_params_t;
pub type ze_pfnMemGetIpcHandleCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_get_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_open_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub phandle: *mut ze_ipc_mem_handle_t,
    pub pflags: *mut ze_ipc_memory_flags_t,
    pub ppptr: *mut *mut *mut ::core::ffi::c_void,
}
pub type ze_mem_open_ipc_handle_params_t = _ze_mem_open_ipc_handle_params_t;
pub type ze_pfnMemOpenIpcHandleCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_open_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_close_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
}
pub type ze_mem_close_ipc_handle_params_t = _ze_mem_close_ipc_handle_params_t;
pub type ze_pfnMemCloseIpcHandleCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_mem_close_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_mem_callbacks_t {
    pub pfnAllocSharedCb: ze_pfnMemAllocSharedCb_t,
    pub pfnAllocDeviceCb: ze_pfnMemAllocDeviceCb_t,
    pub pfnAllocHostCb: ze_pfnMemAllocHostCb_t,
    pub pfnFreeCb: ze_pfnMemFreeCb_t,
    pub pfnGetAllocPropertiesCb: ze_pfnMemGetAllocPropertiesCb_t,
    pub pfnGetAddressRangeCb: ze_pfnMemGetAddressRangeCb_t,
    pub pfnGetIpcHandleCb: ze_pfnMemGetIpcHandleCb_t,
    pub pfnOpenIpcHandleCb: ze_pfnMemOpenIpcHandleCb_t,
    pub pfnCloseIpcHandleCb: ze_pfnMemCloseIpcHandleCb_t,
}
pub type ze_mem_callbacks_t = _ze_mem_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_create_params_t {
    pub phCommandQueue: *mut ze_command_queue_handle_t,
    pub pdesc: *mut *const ze_fence_desc_t,
    pub pphFence: *mut *mut ze_fence_handle_t,
}
pub type ze_fence_create_params_t = _ze_fence_create_params_t;
pub type ze_pfnFenceCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_fence_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_destroy_params_t {
    pub phFence: *mut ze_fence_handle_t,
}
pub type ze_fence_destroy_params_t = _ze_fence_destroy_params_t;
pub type ze_pfnFenceDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_fence_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_host_synchronize_params_t {
    pub phFence: *mut ze_fence_handle_t,
    pub ptimeout: *mut u64,
}
pub type ze_fence_host_synchronize_params_t = _ze_fence_host_synchronize_params_t;
pub type ze_pfnFenceHostSynchronizeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_fence_host_synchronize_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_query_status_params_t {
    pub phFence: *mut ze_fence_handle_t,
}
pub type ze_fence_query_status_params_t = _ze_fence_query_status_params_t;
pub type ze_pfnFenceQueryStatusCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_fence_query_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_reset_params_t {
    pub phFence: *mut ze_fence_handle_t,
}
pub type ze_fence_reset_params_t = _ze_fence_reset_params_t;
pub type ze_pfnFenceResetCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_fence_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_fence_callbacks_t {
    pub pfnCreateCb: ze_pfnFenceCreateCb_t,
    pub pfnDestroyCb: ze_pfnFenceDestroyCb_t,
    pub pfnHostSynchronizeCb: ze_pfnFenceHostSynchronizeCb_t,
    pub pfnQueryStatusCb: ze_pfnFenceQueryStatusCb_t,
    pub pfnResetCb: ze_pfnFenceResetCb_t,
}
pub type ze_fence_callbacks_t = _ze_fence_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pdesc: *mut *const ze_event_pool_desc_t,
    pub pnumDevices: *mut u32,
    pub pphDevices: *mut *mut ze_device_handle_t,
    pub pphEventPool: *mut *mut ze_event_pool_handle_t,
}
pub type ze_event_pool_create_params_t = _ze_event_pool_create_params_t;
pub type ze_pfnEventPoolCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_pool_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_destroy_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
}
pub type ze_event_pool_destroy_params_t = _ze_event_pool_destroy_params_t;
pub type ze_pfnEventPoolDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_pool_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_get_ipc_handle_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
    pub pphIpc: *mut *mut ze_ipc_event_pool_handle_t,
}
pub type ze_event_pool_get_ipc_handle_params_t = _ze_event_pool_get_ipc_handle_params_t;
pub type ze_pfnEventPoolGetIpcHandleCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_pool_get_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_open_ipc_handle_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phIpc: *mut ze_ipc_event_pool_handle_t,
    pub pphEventPool: *mut *mut ze_event_pool_handle_t,
}
pub type ze_event_pool_open_ipc_handle_params_t = _ze_event_pool_open_ipc_handle_params_t;
pub type ze_pfnEventPoolOpenIpcHandleCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_pool_open_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_close_ipc_handle_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
}
pub type ze_event_pool_close_ipc_handle_params_t = _ze_event_pool_close_ipc_handle_params_t;
pub type ze_pfnEventPoolCloseIpcHandleCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_pool_close_ipc_handle_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_pool_callbacks_t {
    pub pfnCreateCb: ze_pfnEventPoolCreateCb_t,
    pub pfnDestroyCb: ze_pfnEventPoolDestroyCb_t,
    pub pfnGetIpcHandleCb: ze_pfnEventPoolGetIpcHandleCb_t,
    pub pfnOpenIpcHandleCb: ze_pfnEventPoolOpenIpcHandleCb_t,
    pub pfnCloseIpcHandleCb: ze_pfnEventPoolCloseIpcHandleCb_t,
}
pub type ze_event_pool_callbacks_t = _ze_event_pool_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_create_params_t {
    pub phEventPool: *mut ze_event_pool_handle_t,
    pub pdesc: *mut *const ze_event_desc_t,
    pub pphEvent: *mut *mut ze_event_handle_t,
}
pub type ze_event_create_params_t = _ze_event_create_params_t;
pub type ze_pfnEventCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_destroy_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
pub type ze_event_destroy_params_t = _ze_event_destroy_params_t;
pub type ze_pfnEventDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_host_signal_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
pub type ze_event_host_signal_params_t = _ze_event_host_signal_params_t;
pub type ze_pfnEventHostSignalCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_host_signal_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_host_synchronize_params_t {
    pub phEvent: *mut ze_event_handle_t,
    pub ptimeout: *mut u64,
}
pub type ze_event_host_synchronize_params_t = _ze_event_host_synchronize_params_t;
pub type ze_pfnEventHostSynchronizeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_host_synchronize_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_query_status_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
pub type ze_event_query_status_params_t = _ze_event_query_status_params_t;
pub type ze_pfnEventQueryStatusCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_query_status_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_host_reset_params_t {
    pub phEvent: *mut ze_event_handle_t,
}
pub type ze_event_host_reset_params_t = _ze_event_host_reset_params_t;
pub type ze_pfnEventHostResetCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_host_reset_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_query_kernel_timestamp_params_t {
    pub phEvent: *mut ze_event_handle_t,
    pub pdstptr: *mut *mut ze_kernel_timestamp_result_t,
}
pub type ze_event_query_kernel_timestamp_params_t = _ze_event_query_kernel_timestamp_params_t;
pub type ze_pfnEventQueryKernelTimestampCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_event_query_kernel_timestamp_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_event_callbacks_t {
    pub pfnCreateCb: ze_pfnEventCreateCb_t,
    pub pfnDestroyCb: ze_pfnEventDestroyCb_t,
    pub pfnHostSignalCb: ze_pfnEventHostSignalCb_t,
    pub pfnHostSynchronizeCb: ze_pfnEventHostSynchronizeCb_t,
    pub pfnQueryStatusCb: ze_pfnEventQueryStatusCb_t,
    pub pfnHostResetCb: ze_pfnEventHostResetCb_t,
    pub pfnQueryKernelTimestampCb: ze_pfnEventQueryKernelTimestampCb_t,
}
pub type ze_event_callbacks_t = _ze_event_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_module_desc_t,
    pub pphModule: *mut *mut ze_module_handle_t,
    pub pphBuildLog: *mut *mut ze_module_build_log_handle_t,
}
pub type ze_module_create_params_t = _ze_module_create_params_t;
pub type ze_pfnModuleCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_destroy_params_t {
    pub phModule: *mut ze_module_handle_t,
}
pub type ze_module_destroy_params_t = _ze_module_destroy_params_t;
pub type ze_pfnModuleDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_dynamic_link_params_t {
    pub pnumModules: *mut u32,
    pub pphModules: *mut *mut ze_module_handle_t,
    pub pphLinkLog: *mut *mut ze_module_build_log_handle_t,
}
pub type ze_module_dynamic_link_params_t = _ze_module_dynamic_link_params_t;
pub type ze_pfnModuleDynamicLinkCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_dynamic_link_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_get_native_binary_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppSize: *mut *mut usize,
    pub ppModuleNativeBinary: *mut *mut u8,
}
pub type ze_module_get_native_binary_params_t = _ze_module_get_native_binary_params_t;
pub type ze_pfnModuleGetNativeBinaryCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_get_native_binary_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_get_global_pointer_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppGlobalName: *mut *const ::core::ffi::c_char,
    pub ppSize: *mut *mut usize,
    pub ppptr: *mut *mut *mut ::core::ffi::c_void,
}
pub type ze_module_get_global_pointer_params_t = _ze_module_get_global_pointer_params_t;
pub type ze_pfnModuleGetGlobalPointerCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_get_global_pointer_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_get_kernel_names_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppCount: *mut *mut u32,
    pub ppNames: *mut *mut *const ::core::ffi::c_char,
}
pub type ze_module_get_kernel_names_params_t = _ze_module_get_kernel_names_params_t;
pub type ze_pfnModuleGetKernelNamesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_get_kernel_names_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_get_properties_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppModuleProperties: *mut *mut ze_module_properties_t,
}
pub type ze_module_get_properties_params_t = _ze_module_get_properties_params_t;
pub type ze_pfnModuleGetPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_get_function_pointer_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub ppFunctionName: *mut *const ::core::ffi::c_char,
    pub ppfnFunction: *mut *mut *mut ::core::ffi::c_void,
}
pub type ze_module_get_function_pointer_params_t = _ze_module_get_function_pointer_params_t;
pub type ze_pfnModuleGetFunctionPointerCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_get_function_pointer_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_callbacks_t {
    pub pfnCreateCb: ze_pfnModuleCreateCb_t,
    pub pfnDestroyCb: ze_pfnModuleDestroyCb_t,
    pub pfnDynamicLinkCb: ze_pfnModuleDynamicLinkCb_t,
    pub pfnGetNativeBinaryCb: ze_pfnModuleGetNativeBinaryCb_t,
    pub pfnGetGlobalPointerCb: ze_pfnModuleGetGlobalPointerCb_t,
    pub pfnGetKernelNamesCb: ze_pfnModuleGetKernelNamesCb_t,
    pub pfnGetPropertiesCb: ze_pfnModuleGetPropertiesCb_t,
    pub pfnGetFunctionPointerCb: ze_pfnModuleGetFunctionPointerCb_t,
}
pub type ze_module_callbacks_t = _ze_module_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_build_log_destroy_params_t {
    pub phModuleBuildLog: *mut ze_module_build_log_handle_t,
}
pub type ze_module_build_log_destroy_params_t = _ze_module_build_log_destroy_params_t;
pub type ze_pfnModuleBuildLogDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_build_log_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_build_log_get_string_params_t {
    pub phModuleBuildLog: *mut ze_module_build_log_handle_t,
    pub ppSize: *mut *mut usize,
    pub ppBuildLog: *mut *mut ::core::ffi::c_char,
}
pub type ze_module_build_log_get_string_params_t = _ze_module_build_log_get_string_params_t;
pub type ze_pfnModuleBuildLogGetStringCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_module_build_log_get_string_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_module_build_log_callbacks_t {
    pub pfnDestroyCb: ze_pfnModuleBuildLogDestroyCb_t,
    pub pfnGetStringCb: ze_pfnModuleBuildLogGetStringCb_t,
}
pub type ze_module_build_log_callbacks_t = _ze_module_build_log_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_create_params_t {
    pub phModule: *mut ze_module_handle_t,
    pub pdesc: *mut *const ze_kernel_desc_t,
    pub pphKernel: *mut *mut ze_kernel_handle_t,
}
pub type ze_kernel_create_params_t = _ze_kernel_create_params_t;
pub type ze_pfnKernelCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_destroy_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
}
pub type ze_kernel_destroy_params_t = _ze_kernel_destroy_params_t;
pub type ze_pfnKernelDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_set_cache_config_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pflags: *mut ze_cache_config_flags_t,
}
pub type ze_kernel_set_cache_config_params_t = _ze_kernel_set_cache_config_params_t;
pub type ze_pfnKernelSetCacheConfigCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_set_cache_config_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_set_group_size_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pgroupSizeX: *mut u32,
    pub pgroupSizeY: *mut u32,
    pub pgroupSizeZ: *mut u32,
}
pub type ze_kernel_set_group_size_params_t = _ze_kernel_set_group_size_params_t;
pub type ze_pfnKernelSetGroupSizeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_set_group_size_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_suggest_group_size_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pglobalSizeX: *mut u32,
    pub pglobalSizeY: *mut u32,
    pub pglobalSizeZ: *mut u32,
    pub pgroupSizeX: *mut *mut u32,
    pub pgroupSizeY: *mut *mut u32,
    pub pgroupSizeZ: *mut *mut u32,
}
pub type ze_kernel_suggest_group_size_params_t = _ze_kernel_suggest_group_size_params_t;
pub type ze_pfnKernelSuggestGroupSizeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_suggest_group_size_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_suggest_max_cooperative_group_count_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ptotalGroupCount: *mut *mut u32,
}
pub type ze_kernel_suggest_max_cooperative_group_count_params_t =
    _ze_kernel_suggest_max_cooperative_group_count_params_t;
pub type ze_pfnKernelSuggestMaxCooperativeGroupCountCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_suggest_max_cooperative_group_count_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_set_argument_value_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pargIndex: *mut u32,
    pub pargSize: *mut usize,
    pub ppArgValue: *mut *const ::core::ffi::c_void,
}
pub type ze_kernel_set_argument_value_params_t = _ze_kernel_set_argument_value_params_t;
pub type ze_pfnKernelSetArgumentValueCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_set_argument_value_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_set_indirect_access_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub pflags: *mut ze_kernel_indirect_access_flags_t,
}
pub type ze_kernel_set_indirect_access_params_t = _ze_kernel_set_indirect_access_params_t;
pub type ze_pfnKernelSetIndirectAccessCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_set_indirect_access_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_get_indirect_access_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppFlags: *mut *mut ze_kernel_indirect_access_flags_t,
}
pub type ze_kernel_get_indirect_access_params_t = _ze_kernel_get_indirect_access_params_t;
pub type ze_pfnKernelGetIndirectAccessCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_get_indirect_access_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_get_source_attributes_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppSize: *mut *mut u32,
    pub ppString: *mut *mut *mut ::core::ffi::c_char,
}
pub type ze_kernel_get_source_attributes_params_t = _ze_kernel_get_source_attributes_params_t;
pub type ze_pfnKernelGetSourceAttributesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_get_source_attributes_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_get_properties_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppKernelProperties: *mut *mut ze_kernel_properties_t,
}
pub type ze_kernel_get_properties_params_t = _ze_kernel_get_properties_params_t;
pub type ze_pfnKernelGetPropertiesCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_get_properties_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_get_name_params_t {
    pub phKernel: *mut ze_kernel_handle_t,
    pub ppSize: *mut *mut usize,
    pub ppName: *mut *mut ::core::ffi::c_char,
}
pub type ze_kernel_get_name_params_t = _ze_kernel_get_name_params_t;
pub type ze_pfnKernelGetNameCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_kernel_get_name_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_kernel_callbacks_t {
    pub pfnCreateCb: ze_pfnKernelCreateCb_t,
    pub pfnDestroyCb: ze_pfnKernelDestroyCb_t,
    pub pfnSetCacheConfigCb: ze_pfnKernelSetCacheConfigCb_t,
    pub pfnSetGroupSizeCb: ze_pfnKernelSetGroupSizeCb_t,
    pub pfnSuggestGroupSizeCb: ze_pfnKernelSuggestGroupSizeCb_t,
    pub pfnSuggestMaxCooperativeGroupCountCb: ze_pfnKernelSuggestMaxCooperativeGroupCountCb_t,
    pub pfnSetArgumentValueCb: ze_pfnKernelSetArgumentValueCb_t,
    pub pfnSetIndirectAccessCb: ze_pfnKernelSetIndirectAccessCb_t,
    pub pfnGetIndirectAccessCb: ze_pfnKernelGetIndirectAccessCb_t,
    pub pfnGetSourceAttributesCb: ze_pfnKernelGetSourceAttributesCb_t,
    pub pfnGetPropertiesCb: ze_pfnKernelGetPropertiesCb_t,
    pub pfnGetNameCb: ze_pfnKernelGetNameCb_t,
}
pub type ze_kernel_callbacks_t = _ze_kernel_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sampler_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *const ze_sampler_desc_t,
    pub pphSampler: *mut *mut ze_sampler_handle_t,
}
pub type ze_sampler_create_params_t = _ze_sampler_create_params_t;
pub type ze_pfnSamplerCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_sampler_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sampler_destroy_params_t {
    pub phSampler: *mut ze_sampler_handle_t,
}
pub type ze_sampler_destroy_params_t = _ze_sampler_destroy_params_t;
pub type ze_pfnSamplerDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_sampler_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_sampler_callbacks_t {
    pub pfnCreateCb: ze_pfnSamplerCreateCb_t,
    pub pfnDestroyCb: ze_pfnSamplerDestroyCb_t,
}
pub type ze_sampler_callbacks_t = _ze_sampler_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_physical_mem_create_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub pdesc: *mut *mut ze_physical_mem_desc_t,
    pub pphPhysicalMemory: *mut *mut ze_physical_mem_handle_t,
}
pub type ze_physical_mem_create_params_t = _ze_physical_mem_create_params_t;
pub type ze_pfnPhysicalMemCreateCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_physical_mem_create_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_physical_mem_destroy_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phPhysicalMemory: *mut ze_physical_mem_handle_t,
}
pub type ze_physical_mem_destroy_params_t = _ze_physical_mem_destroy_params_t;
pub type ze_pfnPhysicalMemDestroyCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_physical_mem_destroy_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_physical_mem_callbacks_t {
    pub pfnCreateCb: ze_pfnPhysicalMemCreateCb_t,
    pub pfnDestroyCb: ze_pfnPhysicalMemDestroyCb_t,
}
pub type ze_physical_mem_callbacks_t = _ze_physical_mem_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_reserve_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub ppStart: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
    pub ppptr: *mut *mut *mut ::core::ffi::c_void,
}
pub type ze_virtual_mem_reserve_params_t = _ze_virtual_mem_reserve_params_t;
pub type ze_pfnVirtualMemReserveCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_virtual_mem_reserve_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_free_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
}
pub type ze_virtual_mem_free_params_t = _ze_virtual_mem_free_params_t;
pub type ze_pfnVirtualMemFreeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_virtual_mem_free_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_query_page_size_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub phDevice: *mut ze_device_handle_t,
    pub psize: *mut usize,
    pub ppagesize: *mut *mut usize,
}
pub type ze_virtual_mem_query_page_size_params_t = _ze_virtual_mem_query_page_size_params_t;
pub type ze_pfnVirtualMemQueryPageSizeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_virtual_mem_query_page_size_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_map_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
    pub phPhysicalMemory: *mut ze_physical_mem_handle_t,
    pub poffset: *mut usize,
    pub paccess: *mut ze_memory_access_attribute_t,
}
pub type ze_virtual_mem_map_params_t = _ze_virtual_mem_map_params_t;
pub type ze_pfnVirtualMemMapCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_virtual_mem_map_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_unmap_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
}
pub type ze_virtual_mem_unmap_params_t = _ze_virtual_mem_unmap_params_t;
pub type ze_pfnVirtualMemUnmapCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_virtual_mem_unmap_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_set_access_attribute_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
    pub paccess: *mut ze_memory_access_attribute_t,
}
pub type ze_virtual_mem_set_access_attribute_params_t =
    _ze_virtual_mem_set_access_attribute_params_t;
pub type ze_pfnVirtualMemSetAccessAttributeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_virtual_mem_set_access_attribute_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_get_access_attribute_params_t {
    pub phContext: *mut ze_context_handle_t,
    pub pptr: *mut *const ::core::ffi::c_void,
    pub psize: *mut usize,
    pub paccess: *mut *mut ze_memory_access_attribute_t,
    pub poutSize: *mut *mut usize,
}
pub type ze_virtual_mem_get_access_attribute_params_t =
    _ze_virtual_mem_get_access_attribute_params_t;
pub type ze_pfnVirtualMemGetAccessAttributeCb_t = ::core::option::Option<
    unsafe  extern "C" fn(
        params: *mut ze_virtual_mem_get_access_attribute_params_t,
        result: ze_result_t,
        pTracerUserData: *mut ::core::ffi::c_void,
        ppTracerInstanceUserData: *mut *mut ::core::ffi::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_virtual_mem_callbacks_t {
    pub pfnReserveCb: ze_pfnVirtualMemReserveCb_t,
    pub pfnFreeCb: ze_pfnVirtualMemFreeCb_t,
    pub pfnQueryPageSizeCb: ze_pfnVirtualMemQueryPageSizeCb_t,
    pub pfnMapCb: ze_pfnVirtualMemMapCb_t,
    pub pfnUnmapCb: ze_pfnVirtualMemUnmapCb_t,
    pub pfnSetAccessAttributeCb: ze_pfnVirtualMemSetAccessAttributeCb_t,
    pub pfnGetAccessAttributeCb: ze_pfnVirtualMemGetAccessAttributeCb_t,
}
pub type ze_virtual_mem_callbacks_t = _ze_virtual_mem_callbacks_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _ze_callbacks_t {
    pub Global: ze_global_callbacks_t,
    pub Driver: ze_driver_callbacks_t,
    pub Device: ze_device_callbacks_t,
    pub Context: ze_context_callbacks_t,
    pub CommandQueue: ze_command_queue_callbacks_t,
    pub CommandList: ze_command_list_callbacks_t,
    pub Fence: ze_fence_callbacks_t,
    pub EventPool: ze_event_pool_callbacks_t,
    pub Event: ze_event_callbacks_t,
    pub Image: ze_image_callbacks_t,
    pub Module: ze_module_callbacks_t,
    pub ModuleBuildLog: ze_module_build_log_callbacks_t,
    pub Kernel: ze_kernel_callbacks_t,
    pub Sampler: ze_sampler_callbacks_t,
    pub PhysicalMem: ze_physical_mem_callbacks_t,
    pub Mem: ze_mem_callbacks_t,
    pub VirtualMem: ze_virtual_mem_callbacks_t,
}
pub type ze_callbacks_t = _ze_callbacks_t;
